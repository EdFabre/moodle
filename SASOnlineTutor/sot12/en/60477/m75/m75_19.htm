<html><!-- InstanceBegin template="/Templates/summary.dwt" codeOutsideHTMLIsLocked="false" -->
<head>

<SCRIPT LANGUAGE="JavaScript" SRC="../tut.js"></SCRIPT>
<script language="JavaScript1.2" src="../nav.js"></script>


<SCRIPT LANGUAGE="JavaScript">
 setPageTitle();
 setCookie();
 
// Drop down menu link- © Dynamic Drive (www.dynamicdrive.com)
// For full source code and 100's more DHTML scripts, visit http://www.dynamicdrive.com
// Credit MUST stay intact for use -->

</SCRIPT>

<!-- InstanceBeginEditable name="extrascript" -->
<SCRIPT LANGUAGE="JavaScript">
</SCRIPT>
<!-- InstanceEndEditable -->

<link rel="stylesheet" href="../tut.css">

<META http-equiv="Content-Type" content="text/html; charset=windows-1252">
</HEAD>

<body marginheight="0" marginwidth="0" topmargin="0" leftmargin="0" rightmargin="0" bgcolor="#FFFFF0">
<script>writeinformationObjectTopNav1();</script>
 
      <font color="#003399" size="3" face="Arial, Helvetica, sans-serif"><strong><script>document.write(summaryTitle)</script></strong></font>
 
 
<script>writeinformationObjectTopNav2();</script>
<br>
<center><TABLE cellpadding=0 cellspacing=0 border=0 width="85%" align="center">
  <TR>
      <TD align="left">
      
      <p><script>document.write(summaryPageContains)</script></p>
     <ul><!-- InstanceBeginEditable name="links" -->
        <LI> <A HREF="#Text" onMouseOver="window.status='Go to the text summary section.'; "
		onMouseOut="window.status=''">a text summary of the material taught in 
          the lesson</A> 
        <LI> <A HREF="#Syntax" onMouseOver="window.status='Go to the syntax section.'; "
		onMouseOut="window.status=''">syntax for&nbsp;statements and options</A> 
          <LI> <A HREF="#Sample" onMouseOver="window.status='Go to the sample program section.'; "
		onMouseOut="window.status=''">sample programs</A> 
          <LI> <A HREF="#Points" onMouseOver="window.status='Go to the points to remember section.'; "
		onMouseOut="window.status=''">points to remember</A>.
      <!-- InstanceEndEditable --></ul>
<P>
	  <HR>
      </TD>
    </TR>
  </TABLE>
  <P>

<!-- InstanceBeginEditable name="textsummaryintro" -->     
<TABLE cellpadding=0 cellspacing=0 border=0 width="85%" align="center">
  <TR>
	<TD align="left"><h2><STRONG><A NAME="Text"><script>document.write(summaryPageTextSummaryTitle);</script></A></STRONG> </h2>
      <P>
	  <EM><script>document.write(summaryPageDirections);</script></EM></TD>
      </TR>
    </TABLE>
<!-- InstanceEndEditable -->
  <br>
<!-- InstanceBeginEditable name="textsummary" --> 
<table width="85%" border="0" cellpadding="0" cellspacing="0" align="center">
  <tr valign="top"> 
      <td> <p><strong>Introduction</strong><br>
          A <a href="m75_1.htm" onClick="suggestBack()">PROC SQL view</a> is a 
          stored query that is executed when you use the view in a SAS procedure, 
          DATA step, or function. A view contains only the descriptor and other 
          information required to retrieve the data values from other SAS files 
          (SAS data files, DATA step views, or other PROC SQL views) or external 
          files (DBMS data files). When executed, a PROC SQL view's output can 
          be a subset or superset of one or more underlying files. A view contains 
          no data, but describes or defines data that is stored elsewhere.</p>
        <p>PROC SQL views</p>
        <ul>
          <li>can be used in SAS programs in place of an actual SAS data file</li>
          <li>can be joined with tables or other views</li>
          <li>can be derived from one or more tables, PROC SQL views, or DATA 
            step views</li>
          <li>extract underlying data, which enables you to access the most current 
            data.</li>
        </ul>
        <p><strong>PROC SQL Views</strong><br>
          Because <a href="m75_2.htm" onClick="suggestBack()">PROC SQL views</a> 
          are not separate copies of data, they are referred to as virtual tables. 
          They do not exist as independent entities like real tables. However, 
          views use the same naming conventions as tables and can be used in SAS 
          programs in place of an actual SAS table. Like tables, views are considered 
          to be SAS data sets.</p>
        <p><strong>Creating SQL Views</strong> <br>
          You use the <a href="m75_3.htm" onClick="suggestBack()">CREATE VIEW 
          statement</a> to create a view.<font color="#FF0000"></font> A PROC 
          SQL view derives its data from the tables or views that are listed in 
          the FROM clause. The data that is accessed by a view is a subset or 
          superset of the data that is in its underlying tables(s) or view(s). 
          When a view is referenced by a SAS procedure or in a DATA step, it is 
          executed and, conceptually, an internal table is built. PROC SQL processes 
          this internal table as if it were any other table. A view can be used 
          in a subsequent PROC SQL step just as you would use an actual SAS table.</p>
        <p><strong>Displaying the Definition for a PROC SQL View<br>
          </strong>You can use a <a href="m75_6.htm" onClick="suggestBack()">DESCRIBE 
          VIEW statement</a> to display a definition of a view in the SAS log. 
        </p>
        <p><strong>Managing PROC SQL Views</strong><br>
          The default libref for the table or tables in the FROM clause is the 
          libref of the library that contains the view. Using a <a href="m75_9.htm" onClick="suggestBack()">one-level 
          name</a> prevents you from having to change the view if you assign a 
          different libref to the SAS library that contains the view and 
          its contributing table or tables.</p>
        <p> As a more flexible alternative to omitting the libref in the FROM 
          clause, you can <a href="m75_10.htm" onClick="suggestBack()">embed a 
          LIBNAME statement</a> in a USING clause if you want to store a SAS libref 
          in a view. Embedding a LIBNAME statement in a USING clause does not 
          conflict with an identically named libref in the SAS session.</p>
        <p>One advantage of PROC SQL views is that they can bring data together 
          from separate sources. This enables views to be used to shield sensitive 
          or confidential columns from some users while enabling the same users 
          to view other columns in the same table. Although PROC SQL views can 
          be used to <a href="m75_13.htm" onClick="suggestBack()">enhance table 
          security</a>, it is strongly recommended that you use the security features 
          that are available in your operating environment to maintain table security.</p>
        <p><strong>Updating PROC SQL Views</strong><br>
          You can <a href="m75_14.htm" onClick="suggestBack()">update the data</a> 
          underlying a PROC SQL view using the INSERT, DELETE, and UPDATE statements 
          under the following conditions:</p>
        <ul>
          <li>You can only update a single table through a view. The table cannot 
            be joined or linked to another table, nor can it contain a subquery.<br>
            <br>
          </li>
          <li>You can update a column using the column's alias, but you cannot 
            update a derived column (a column that is produced by an expression).<br>
            <br>
          </li>
          <li>You can update a view that contains a WHERE clause. The WHERE clause 
            can be in the UPDATE clause or in the view. You cannot update a view 
            that contains any other clause such as an ORDER BY or a HAVING clause.<br>
            <br>
          </li>
          <li>You cannot update a summary view (a view that contains a GROUP BY 
            clause).</li>
        </ul>
        <p><br>
          <strong>Dropping PROC SQL Views</strong><br>
          To drop (delete) a view, use the <a href="m75_16.htm" onClick="suggestBack()">DROP 
          VIEW statement</a>.</p>
        </td>
  </tr>
</table>
<!-- InstanceEndEditable --> <br>
<table cellpadding=0 cellspacing=0 border=0 width="85%" align="center">
  <tr> 
    <td align="left"> 
      <hr>
    </td>
  </tr>
</table>

<P><!-- InstanceBeginEditable name="syntax" -->
  <TABLE cellpadding=0 cellspacing=0 border=0 width="85%" align="center">
    <TR> 
      <TD><h2><STRONG><A NAME="Syntax">Syntax</A></STRONG> </h2>
        <P> <EM>To go to the page where a statement or option was presented, select 
          a link.</EM>
      </TD>
    </TR>
  </TABLE>
  <br>
<P> 

  <TABLE CELLPADDING="2" align="center">
    <TR> 
      <TD><FONT color="#003399"><STRONG>PROC SQL;</STRONG></FONT></TD>
    </TR>
    <TR> 
      <TD>&nbsp;</TD>
    </TR>
    <TR> 
      <TD><FONT color="Teal"><NOBR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="m75_3.htm" onClick="suggestBack()"
	      onMouseOver="window.status='Display details on the CREATE VIEW statement.'; "
	      onMouseOut="window.status=''"><STRONG>CREATE VIEW </STRONG><EM>proc-sql-view 
        </EM><strong>AS</strong></A><br>
        </NOBR></FONT><font color="#003399">&nbsp;</font><font color="#003399"> 
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font color="#003399"><A HREF="m75_3.htm" onClick="suggestBack()"
	      onMouseOver="window.status='Display details on the CREATE VIEW statement.'; "
	      onMouseOut="window.status=''"><strong>SELECT</strong> <em>column-1&lt;, 
        ... column-n</em>&gt;</a><br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="m75_3.htm" onClick="suggestBack()"
	      onMouseOver="window.status='Display details on the CREATE VIEW statement.'; "
	      onMouseOut="window.status=''"><strong>FROM</strong> <em>table-1 | view-1&lt;, 
        ... table-n | view-n&gt;</em></a><br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;<A HREF="m75_3.htm" onClick="suggestBack()"
	      onMouseOver="window.status='Display details on the CREATE VIEW statement.'; "
	      onMouseOut="window.status=''"><em>optional query clauses&gt;</em><strong>;</strong></a></font><FONT color="Teal"><NOBR></NOBR></FONT></TD>
    </TR>
    <TR> 
      <TD><FONT color="Teal">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="m75_10.htm" onClick="suggestBack()"
	      onMouseOver="window.status='Display details on the USING clause.'; "
	      onMouseOut="window.status=''"><STRONG>USING </STRONG><EM>libname-clause 
        &lt;,...</EM><em>libname-clause&gt;</em><STRONG>;</STRONG></A></FONT></TD>
    </TR>
    <TR> 
      <TD>&nbsp;</TD>
    </TR>
    <TR> 
      <TD><FONT color="Teal">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="m75_6.htm" onClick="suggestBack()"
	      onMouseOver="window.status='Display details on the DESCRIBE VIEW statement.'; "
	      onMouseOut="window.status=''"><STRONG>DESCRIBE VIEW </STRONG><EM>proc-sql-view 
        &lt;,...proc-sql-view&gt;</EM></A><A HREF="m16c4.htm" onClick="suggestBack()" onMouseOver="window.status='Display details on the OPTIONS statement.'; "
	      onMouseOut="window.status=''"><STRONG>;</STRONG></A></FONT></TD>
    </TR>
    <TR> 
      <TD>&nbsp;</TD>
    </TR>
    <TR> 
      <TD><FONT color="Teal">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</FONT><font color="#003399"><strong>INSERT 
        INTO</strong> <em>table-name</em> | <em>proc-sql-view</em> </font><font color="#003399"><em><br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;(target-column-1&lt;, ... target-column-n</em>)&gt;</font><br> <font color="#003399">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>SET</strong> 
        <em>column-1</em>=<em>value-1&lt;, ... column-n</em>=<em>value-n</em>&gt;<strong><br>
        </strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;<strong>...</strong> 
        </font><font color="#003399"><strong>SET</strong> <em>column-1</em>=<em>value-1&lt;, 
        ... column-n</em>=<em>value-n</em>&gt;&gt;<strong>;</strong></font> </TD>
    </TR>
    <TR> 
      <TD>&nbsp;</TD>
    </TR>
    <TR> 
      <TD><font color="#003399"><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DELETE 
        FROM</strong> <em>table-name | proc-sql-view</em> </font><font color="#003399"><br>
        </font><font color="#003399">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;<strong>WHERE</strong> 
        <em>expression</em>&gt;<strong>;</strong></font> </TD>
    </TR>
    <TR> 
      <TD>&nbsp;</TD>
    </TR>
    <TR> 
      <TD><font color="#003399"><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;UPDATE</strong> 
        <em>table-name</em> | <em>proc-sql-view</em></font><br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#003399"><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SET</strong> 
        <em>column-1</em>=<em>expression</em><em>&lt;, ... column-n</em>=<em>expression</em>&gt;&gt;</font><br> 
        <font color="#003399">&nbsp; </font><font color="#003399">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;<strong>WHERE</strong> 
        <em>expression</em>&gt;<strong>;</strong></font> </TD>
    </TR>
    <TR> 
      <TD>&nbsp;</TD>
    </TR>
    <TR> 
      <TD><FONT color="Teal">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="m75_16.htm" onClick="suggestBack()"
	      onMouseOver="window.status='Display details on the DROP VIEW statement.'; "
	      onMouseOut="window.status=''"><STRONG>DROP VIEW </STRONG><EM>view-name&lt;,...view-name&gt;</EM><STRONG>;</STRONG></A></FONT></TD>
    </TR>
    <TR> 
      <TD>&nbsp;</TD>
    </TR>
    <TR> 
      <TD><font color="#003399"><strong>QUIT;</strong></font></TD>
    </TR>
  </TABLE>

<P> 
  <TABLE cellpadding=0 cellspacing=0 border=0 width="85%" align="center">
    <TR> 
      <TD align="left"> 
        <HR>
      </TD>
    </TR>
  </TABLE>
  <br>
<!-- InstanceEndEditable -->
<P> 
  <!-- InstanceBeginEditable name="sampleprogram" --> 
  <TABLE cellpadding=0 cellspacing=0 border=0 width="85%" align="center">
    <TR> 
      <TD align="left"><h2><STRONG><A NAME="Sample">Sample Programs</A></STRONG></h2>
        <blockquote> 
          <p> <strong>Creating a PROC SQL View</strong></p>
        </blockquote>  
		<PRE><font color="#003399">     proc sql;
        create view sasuser.raisev as
           select empid, jobcode, 
                  salary format=dollar12.2, 
                  salary/12 as MonthlySalary
                  format=dollar12.
              from payrollmaster
              using libname airline 'c:\data\ia';
     quit;</font></pre>

        <blockquote> 
          <p> <strong>Displaying the Definition for a PROC SQL View</strong></p>
        </blockquote> 
	 <PRE><font color="#003399">     proc sql;<br>        describe view sasuser.raisev;
     quit;</font></pre>
	 
        <blockquote> 
          <p> <strong>Using a PROC SQL View in a Query</strong></p>
        </blockquote>  
        <PRE><font color="#003399">     proc sql;
        select *
           from sasuser.raisev
           where jobcode in ('PT2','PT3');
     quit; </font></pre>

        <blockquote> 
          <p> <strong>Updating a PROC SQL View</strong></p>
        </blockquote>  
        <PRE><font color="#003399">     proc sql;
        update sasuser.raisev
           set salary=salary * 1.20 
           where jobcode='PT3';
     quit;</font></pre>

        <blockquote> 
          <p> <strong>Dropping a PROC SQL View</strong></p>
        </blockquote>  
        <PRE><font color="#003399">     proc sql;
        drop view sasuser.raisev;
     quit;</font></PRE> 
        <P> 
        <HR>
      </TD>
    </TR>
  </TABLE>
  <br>
  <!-- InstanceEndEditable --> 
<P>
  <!-- InstanceBeginEditable name="pointstoremember" --> 
  <TABLE cellpadding=0 cellspacing=0 border=0 width="85%" align="center">
    <TR> 
      <TD align="left"><h2><STRONG><A NAME="Points">Points to Remember</A></STRONG> 
        </h2>
        <UL>
          <li>Avoid using an ORDER BY clause in a view definition, which causes 
            the data to be sorted every time the view is executed. Users of the 
            view might differ in how or whether they want the data to be sorted, 
            so it is more efficient to specify an ORDER BY clause in a query that 
            references the view.<br>
            <br>
          </li>
          <li>If the same data is used many times in one program or in multiple 
            programs, it is more efficient to create a table rather than a view 
            because the data must be accessed at each view reference. (This table 
            can be a temporary table in the <strong>Work</strong> library.)<br>
            <br>
          </li>
          <li>Avoid creating views that are based on tables whose structure might 
            change. A view is no longer valid when it references a nonexistent 
            column.<br>
            <br>
          </li>
          <li>If a view resides in the same SAS library as the contributing 
            table(s), it is best to specify a one-level name in the FROM clause.</li>
        </UL>
      </TD>
    </TR>
  </TABLE>
  <br>
<!-- InstanceEndEditable --></center>
<script>writeNav_regular_bottom();</script>
</body>
<!-- InstanceEnd --></html>