<html><!-- InstanceBegin template="/Templates/informationObject.dwt" codeOutsideHTMLIsLocked="false" -->
<head>
<SCRIPT LANGUAGE="JavaScript" SRC="../tut.js"></SCRIPT>
<script language="JavaScript" src="../nav.js"></script>
<SCRIPT LANGUAGE="JavaScript">
 setPageTitle();
 setCookie();
  
// Drop down menu link- © Dynamic Drive (www.dynamicdrive.com)
// For full source code and 100's more DHTML scripts, visit http://www.dynamicdrive.com
// Credit MUST stay intact for use -->

</SCRIPT>

<!-- InstanceBeginEditable name="extrascript" --> 
<SCRIPT LANGUAGE="JavaScript">
</SCRIPT>
<!-- InstanceEndEditable -->

<link rel="stylesheet" href="../tut.css">


<META http-equiv="Content-Type" content="text/html; charset=windows-1252">
</HEAD>

<body marginheight="0" marginwidth="0" topmargin="0" leftmargin="0" rightmargin="0" bgcolor="#FFFFF0">
<script>writeinformationObjectTopNav1();</script>
	  
	  <font color="#003399" size="3" face="Arial, Helvetica, sans-serif"><strong><!-- InstanceBeginEditable name="TopicTitle" -->Basic 
      Concepts<!-- InstanceEndEditable --></strong></font> <!-- InstanceBeginEditable name="continued" --><font color="#003399" size="3" face="Arial, Helvetica, sans-serif">(continued)</font><!-- InstanceEndEditable -->
	  
<script>writeinformationObjectTopNav2();</script>
<br>
<center>
  <!-- InstanceBeginEditable name="content" --> 
<table width="85%" border="0" cellpadding="0" cellspacing="0" align="center">
  <tr valign="top"> 
    <td>
<h2>Macro Execution</h2>
        <P> When you call a macro in your SAS program, the word scanner passes 
          the macro call to the macro processor, because the percent sign that 
          precedes the macro name is a macro trigge<strong>r</strong>. When the 
          macro processor receives <nobr><em>%macro-name</em></nobr>, it 
        <OL>
          <LI>searches the designated SAS catalog (<strong>Work.Sasmacr </strong>by 
            default) for an entry named <nobr><em><strong>Macro-name</strong></em><strong>.Macro</strong></nobr>.</LI>
          <LI>executes compiled macro language statements within 
            <em><strong>Macro-name</strong></em>.</LI>
          <LI>sends any remaining text in <em><strong>Macro-name</strong></em><strong> 
            </strong>to the input stack for word scanning.</LI>
          <LI>suspends macro execution when the SAS compiler receives a global 
            SAS statement or when it encounters a SAS step boundary.</LI>
          <LI>resumes execution of macro language statements after the SAS code executes.</LI>
</OL>
Later in this lesson you will see detailed examples of macro execution. These examples will make more sense once you have learned how to write a more complex macro program than you have seen so far in this lesson.
        <P>For now, remember that the macro call is processed by the macro processor 
          <strong>before </strong>any SAS language statements such as DATA steps 
          are compiled or executed. During macro execution, the macro processor 
          can communicate directly with 
        <ul>
          <li>both global and local symbol tables. For example, the macro processor 
            can store macro variable values with a <nobr>%LET</nobr> statement 
            and can resolve macro variable references. <br><br>
          <li>the input stack. For example, the macro processor can generate SAS 
            code for tokenization by the word scanner. 
        </ul>
<p>During macro execution, the macro processor <strong>cannot</strong> communicate directly with 
  SAS data sets in order to obtain or modify the values of DATA step variables. </p>
<table border="0" cellpadding="2" cellspacing="0">
    <tr> 
            <td valign="top" width="24"><img src="../navimages/note.gif"  alt="More Information" width="20" height="20"></td>
      <td valign="top">You will learn more about global and local symbol tables later in this lesson. </td>
    </tr>
  </table>

    </td>
  </tr>
</table><P><BR>
<!-- InstanceEndEditable --> 
</center>
<script>writeNav_regular_bottom();</script>
</body>
<!-- InstanceEnd --></html>
