<html><!-- InstanceBegin template="/Templates/overview.dwt" codeOutsideHTMLIsLocked="false" -->
<head>
<SCRIPT LANGUAGE="JavaScript" SRC="../tut.js"></SCRIPT>
<script language="JavaScript" src="../nav.js"></script>
<SCRIPT LANGUAGE="JavaScript">
 setPageTitle();
 setCookie();
 
// Drop down menu link- © Dynamic Drive (www.dynamicdrive.com)
// For full source code and 100's more DHTML scripts, visit http://www.dynamicdrive.com
// Credit MUST stay intact for use -->

</SCRIPT>

<!-- InstanceBeginEditable name="extrascript" --> 
<SCRIPT LANGUAGE="JavaScript">
</SCRIPT>
<!-- InstanceEndEditable -->

<link rel="stylesheet" href="../tut.css">


<META http-equiv="Content-Type" content="text/html; charset=windows-1252">
</HEAD>

<body marginheight="0" marginwidth="0" topmargin="0" leftmargin="0" rightmargin="0" bgcolor="#FFFFF0">
<script>writeinformationObjectTopNav1();</script>
	
      <font color="#003399" size="3" face="Arial, Helvetica, sans-serif"><strong><script>document.write(overviewTitle)</script></strong></font>
	  
<script>writeinformationObjectTopNav2();</script>

<br>
<center>

<p> 
 <!-- InstanceBeginEditable name="overview" --> 
<table width="85%" border="0" cellpadding="0" cellspacing="0" align="center">
  <tr valign="top"> 
    <td> 
      <h2>Introduction</h2>
        <p>Like macro variables, macro programs (also known as macros) enable 
          you to <strong>substitute text</strong> into your SAS programs. Macros 
          are different from macro variables because they can use conditional 
          logic to make decisions about the text that you substitute into your 
          programs. Using macros can help make your SAS programs more dynamic 
          and reusable. 
        <p>For example, suppose you submit a SAS program every day to create registration 
          listings for courses that are to be held later in the current month. 
          Then, suppose that every Friday you also submit a SAS program to create 
          a summary of revenue that has been generated so far in the current month. 
          By using a macro, you can automate the process so that only one SAS 
          program is required. This program will always submit the daily report 
          and will conditionally submit the weekly report if it is Friday. Furthermore, 
          you could create and store a macro that would automate this process, 
          and the only code you would need to submit each day is this: <font color="#003399"><pre>    %reports</pre></font>
    </td>
  </tr>
</table><p>
<!-- InstanceEndEditable -->
  <!-- InstanceBeginEditable name="overview_graphic" --><!-- InstanceEndEditable -->
<table width="85%" border="0" cellpadding="0" cellspacing="0" align="center">
  <tr valign="top"> 
    <td> 
      <h2><script>document.write(overviewTimeToComplete)</script></h2>
      <p><script>document.write(overviewTimeIntro)</script><!-- InstanceBeginEditable name="time_to_complete" -->2 
          hours<!-- InstanceEndEditable --><script>document.write(overviewTimeEnd)</script></p>
    </td>
  </tr>
</table>
<br>
<br>
<table width="85%" border="0" cellpadding="0" cellspacing="0" align="center">
  <tr valign="top"> 
    <td> 
      <h2><script>document.write(overviewObjectives)</script></h2>
      <!-- InstanceBeginEditable name="objectives" --> 
      <p>In this lesson, you learn to</p>
      <p><ul>
          <LI>define and call simple macros</LI>
          <LI>describe the basic actions that the macro processor performs during macro 
            compilation and execution</LI>
          <LI>use system options for macro debugging</LI>
          <LI>interpret error messages and warning messages that the macro processor generates</LI>
          <LI>define and call macros that include parameters</LI>
          <LI>describe the difference between positional parameters and keyword parameters</LI>
          <LI>explain the difference between the global symbol table and local symbol 
            tables</LI>
          <LI>describe how the macro processor determines which symbol table to use</LI>
          <LI>describe the concept of nested macros and the hierarchy of symbol tables</LI>
	      <LI>conditionally process code within a macro program</LI>
  <LI>iteratively process code within a macro program.</LI>
</UL>
      <!-- InstanceEndEditable --></td>
  </tr>
</table>
<br>
<table width="85%" border="0" cellpadding="0" cellspacing="0" align="center">
  <tr valign="top"> 
    <td> 
      <h2><script>document.write(overviewPrerequisites)</script></h2>
      <p><script>document.write(overviewPrerequisitesIntro)</script><!-- InstanceBeginEditable name="prerequisites_leadin" --> 
          complete the following lessons:<!-- InstanceEndEditable --></p>
      <ul><!-- InstanceBeginEditable name="prerequisites" --> 
        <li><strong><script>document.write(m1title);</script></strong></li>
        <li><strong><script>document.write(m3title);</script></strong></li>
        <li><strong><script>document.write(m16title);</script></strong></li>
        <li><strong><script>document.write(m2title);</script></strong></li>
        <li><strong><script>document.write(m4title);</script></strong></li>
        <li><strong><script>document.write(m12title);</script></strong></li>
        <li><strong><script>document.write(m22title);</script></strong></li>
	<li><strong><script>document.write(m39title);</script></strong></li>
	<li><strong><script>document.write(m30title);</script></strong></li>
	<li><strong><script>document.write(m50title);</script></strong></li>
	<li><strong><script>document.write(m51title);</script></strong>.</li>
	
        <!-- InstanceEndEditable -->
      </ul>
    </td>
  </tr>
</table>

  <br>
</center>
<script>writeNav_regular_bottom();</script>
</body>
<!-- InstanceEnd --></html>