<html><!-- InstanceBegin template="/Templates/informationObject.dwt" codeOutsideHTMLIsLocked="false" -->
<head>
<SCRIPT LANGUAGE="JavaScript" SRC="../tut.js"></SCRIPT>
<script language="JavaScript" src="../nav.js"></script>
<SCRIPT LANGUAGE="JavaScript">
 setPageTitle();
 setCookie();
  
// Drop down menu link- © Dynamic Drive (www.dynamicdrive.com)
// For full source code and 100's more DHTML scripts, visit http://www.dynamicdrive.com
// Credit MUST stay intact for use -->

</SCRIPT>

<!-- InstanceBeginEditable name="extrascript" --> 
<SCRIPT LANGUAGE="JavaScript">
</SCRIPT>
<!-- InstanceEndEditable -->

<link rel="stylesheet" href="../tut.css">


<META http-equiv="Content-Type" content="text/html; charset=windows-1252">
</HEAD>

<body marginheight="0" marginwidth="0" topmargin="0" leftmargin="0" rightmargin="0" bgcolor="#FFFFF0">
<script>writeinformationObjectTopNav1();</script>
	  
	  <font color="#003399" size="3" face="Arial, Helvetica, sans-serif"><strong><!-- InstanceBeginEditable name="TopicTitle" -->Referencing 
      Macro Variables Indirectly<!-- InstanceEndEditable --></strong></font> <!-- InstanceBeginEditable name="continued" --><!-- InstanceEndEditable -->
	  
<script>writeinformationObjectTopNav2();</script>
<br>
<center>
  <!-- InstanceBeginEditable name="content" --> 
<table width="85%" border="0" cellpadding="0" cellspacing="0" align="center">
  <tr valign="top"> 
    <td><h2>Introduction</h2>
        <P>In the last example, you saw how to use the SYMPUT routine to create 
          a series of macro variables whose names are based on the values of <code>Course_code</code>. 
          However, you still needed to modify the TITLE statement in each PROC 
          PRINT step in order to print output for each course. 
        <P>Suppose you want to write a PROC PRINT step that you can reuse without 
          any modification<strong> </strong> to print information about each course. 
          You can do this by using an <strong>indirect reference</strong> in the 
          TITLE statement. 
        <pre><font color="#003399">    data _null_;
       set sasuser.courses;
       call symput(course_code,trim(course_title));
    run;

    %let crsid=C002;
    proc print data=sasuser.schedule noobs label;
       where course_code=&quot;&amp;crsid&quot;;
       var location begin_date teacher;
       title1 &quot;Schedule for <font color="red"><strong>???</strong></font>&quot;;
    run;
</font></pre>
        <p>In the example above, the macro variable <code>C002</code> (as created 
          by the SYMPUT routine) has a value of <em>Structured Query Language</em>. 
          Therefore, the TITLE statement should reference a macro variable that 
          will resolve to <em>Structured Query Language</em>. Remember that you 
          want this reference to be flexible enough to apply to any of the macro 
          variables that the SYMPUT routine creates, such as <code>C003</code> 
          or <code>C004</code>, by changing only the <nobr>%LET</nobr> statement. 
        <P> To obtain the value <em>Structured Query Language</em>, you need to 
          indirectly reference the macro variable <code>C002</code> through a 
          reference to the macro variable <code>crsid</code>. If the value of 
          the macro variable <code>crsid</code> is <em>C002</em>, then you need 
          to proceed in several steps: 
        <ol>
          <LI>Resolve the macro variable <code>crsid</code> to the value <em>C002</em>.</LI>
          <LI>Attach an ampersand (<code>&amp;</code>) to the front of the resolved 
            value in order to create a new reference (<code>&amp;C002</code>).</LI>
          <LI>Resolve the resulting macro variable reference to the value <em>Structured 
            Query Language</em>.</LI>
</ol>
This sequence seems to imply that you should use the reference <code>&amp;&amp;crsid</code> 
        to convert the value of the macro variable <code>crsid</code> to the corresponding 
        course description. However, the Forward Re-scan Rule indicates that this 
        is not the correct solution. Let's look at this rule. </td>
    </tr></table>
<P><BR>
<!-- InstanceEndEditable --> 
</center>
<script>writeNav_regular_bottom();</script>
</body>
<!-- InstanceEnd --></html>
