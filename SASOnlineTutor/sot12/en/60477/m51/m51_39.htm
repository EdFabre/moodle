<html><!-- InstanceBegin template="/Templates/summary.dwt" codeOutsideHTMLIsLocked="false" -->
<head>

<SCRIPT LANGUAGE="JavaScript" SRC="../tut.js"></SCRIPT>
<script language="JavaScript1.2" src="../nav.js"></script>


<SCRIPT LANGUAGE="JavaScript">
 setPageTitle();
 setCookie();
 
// Drop down menu link- © Dynamic Drive (www.dynamicdrive.com)
// For full source code and 100's more DHTML scripts, visit http://www.dynamicdrive.com
// Credit MUST stay intact for use -->

</SCRIPT>

<!-- InstanceBeginEditable name="extrascript" --> 
<SCRIPT LANGUAGE="JavaScript">
</SCRIPT>
<!-- InstanceEndEditable -->

<link rel="stylesheet" href="../tut.css">

<META http-equiv="Content-Type" content="text/html; charset=windows-1252">
</HEAD>

<body marginheight="0" marginwidth="0" topmargin="0" leftmargin="0" rightmargin="0" bgcolor="#FFFFF0">
<script>writeinformationObjectTopNav1();</script>
 
      <font color="#003399" size="3" face="Arial, Helvetica, sans-serif"><strong><script>document.write(summaryTitle)</script></strong></font>
 
 
<script>writeinformationObjectTopNav2();</script>
<br>
<center><TABLE cellpadding=0 cellspacing=0 border=0 width="85%" align="center">
  <TR>
      <TD align="left">
      
      <p><script>document.write(summaryPageContains)</script></p>
     <ul><!-- InstanceBeginEditable name="links" --> 
        <LI> <A HREF="#Text" onMouseOver="window.status='Go to the text summary section.'; "
		onMouseOut="window.status=''">a text summary of the material taught in 
          the course</A> 
        <LI> <A HREF="#Syntax" onMouseOver="window.status='Go to the syntax section.'; "
		onMouseOut="window.status=''">syntax for&nbsp;statements and options</A> 
        <LI> <A HREF="#Sample" onMouseOver="window.status='Go to the sample program section.'; "
		onMouseOut="window.status=''">sample programs</A> 
        <LI> <A HREF="#Points" onMouseOver="window.status='Go to the points to remember section.'; "
		onMouseOut="window.status=''">points to remember</A>. 
        <!-- InstanceEndEditable --></ul>
<P>
	  <HR>
      </TD>
    </TR>
  </TABLE>
  <P>

<!-- InstanceBeginEditable name="textsummaryintro" -->     
<TABLE cellpadding=0 cellspacing=0 border=0 width="85%" align="center">
  <TR>
	<TD align="left"><h2><STRONG><A NAME="Text"><script>document.write(summaryPageTextSummaryTitle);</script></A></STRONG> </h2>
      <P>
	  <EM><script>document.write(summaryPageDirections);</script></EM></TD>
      </TR>
    </TABLE>
<!-- InstanceEndEditable -->
  <br>
<!-- InstanceBeginEditable name="textsummary" --> 
<table width="85%" border="0" cellpadding="0" cellspacing="0" align="center">
  <tr valign="top"> 
    <td> 
    
 <p><strong>Creating a Macro Variable During DATA Step Execution </strong> <br>
          When you create or update a macro variable with the <a href="m51_3.htm" onClick="suggestBack()" onMouseOver="window.status='Display details on the %LET statement.';" onMouseOut="window.status=''"><nobr>%LET</nobr> 
          statement</a>, all macro processing takes place before the execution 
          of the DATA step. The <a href="m51_4.htm" onClick="suggestBack()" onMouseOver="window.status='Display details on the SYMPUT routine.';" onMouseOut="window.status=''">SYMPUT 
          routine</a> enables you to create or update macro variables during DATA 
          step execution. Depending on how the arguments are coded, you can create 
          either a single macro variable or multiple macro variables. You can 
          use the SYMPUT routine with a <a href="m51_6.htm" onClick="suggestBack()" onMouseOver="window.status='Display details on SYMPUT with a literal string.';" onMouseOut="window.status=''">literal 
          string</a> to create a macro variable and to assign either an exact 
          name or an exact text value to it. You can use the SYMPUT routine with 
          a <a href="m51_8.htm" onClick="suggestBack()" onMouseOver="window.status='Display details on SYMPUT with a DATA step variable.';" onMouseOut="window.status=''">DATA 
          step variable</a> to assign the value of that DATA step variable to 
          a macro variable. You can also use a <a href="m51_11.htm" onClick="suggestBack()" onMouseOver="window.status='Display details on SYMPUT with a DATA step expression.';" onMouseOut="window.status=''">DATA 
          step expression</a> as an argument to the SYMPUT routine in order to 
          apply DATA step functions to a value before you assign that value to 
          a macro variable. The <a href="m51_12.htm" onClick="suggestBack()" onMouseOver="window.status='Display details on the PUT function.';" onMouseOut="window.status=''">PUT 
          function</a> is often useful in conjunction with the SYMPUT routine.</p>
      <p><strong>Creating Multiple Macro Variables During DATA Step Execution </strong> <br>
          You can use the SYMPUT routine with <a href="m51_15.htm" onClick="suggestBack()" onMouseOver="window.status='Display details on SYMPUT with two DATA step expressions.';" onMouseOut="window.status=''">two 
          DATA step expressions</a> to create a series of related macro variables 
          within one DATA step. </p>
        <p><strong>Referencing Macro Variables Indirectly</strong> <br>
        Sometimes it is useful to use <a href="m51_18.htm" onClick="suggestBack()" onMouseOver="window.status='Display details on indirect references.';" onMouseOut="window.status=''">indirect references</a> to macro variables. For example, 
you might want to use a macro variable to construct the name of another macro variable.
You can reference a macro variable indirectly by preceding the macro variable name with two or more ampersands.</p>
        <p><strong>Obtaining Macro Variable Values During DATA Step Execution</strong><br>
        The <a href="m51_24.htm" onClick="suggestBack()" onMouseOver="window.status='Display details on the SYMGET function.';" onMouseOut="window.status=''">SYMGET function</a> is used by both the DATA step and the <a href="m51_34.htm" onClick="suggestBack()" onMouseOver="window.status='Display details on SYMGET and the SQL procedure.';" onMouseOut="window.status=''">SQL procedure</a> to obtain the value of a macro 
variable during execution. You can use the SYMGET function to assign a macro variable as a value for a data set variable.
</p>

<p><strong>Creating Macro Variables During PROC SQL Step Execution  
</strong> <br>
          You can access the macro facility in a PROC SQL step by using the <a href="m51_27.htm" onClick="suggestBack()" onMouseOver="window.status='Display details on the INTO clause.';" onMouseOut="window.status=''">INTO 
          clause</a> in the SELECT statement. Various forms of the INTO clause 
          enable you to create <a href="m51_28.htm" onClick="suggestBack()" onMouseOver="window.status='Display details on creating a series of macro variables.';" onMouseOut="window.status=''">a 
          series of macro variables</a>, a <a href="m51_30.htm" onClick="suggestBack()" onMouseOver="window.status='Display details on multidimensional arrays.';" onMouseOut="window.status=''">varying 
          number of macro variables</a>, or a single macro variable that records 
          a value that is created by <a href="m51_32.htm" onClick="suggestBack()" onMouseOver="window.status='Display details on concatenating values.';" onMouseOut="window.status=''">concatenating 
          values</a> of another variable. You can use the <a href="m51_27.htm" onClick="suggestBack()" onMouseOver="window.status='Display details on the NOPRINT option.';" onMouseOut="window.status=''">NOPRINT 
          option</a> to prevent a PROC SQL step from creating output.</p>
		  <p><strong>Working with PROC SQL Views 
</strong> <br>
          You can access the macro facility in a PROC SQL step by using the <a href="m51_27.htm" onClick="suggestBack()" onMouseOver="window.status='Display details on the INTO clause.';" onMouseOut="window.status=''">INTO 
          clause</a> in the SELECT statement. Various forms of the INTO clause 
          enable you to create <a href="m51_28.htm" onClick="suggestBack()" onMouseOver="window.status='Display details on creating a series of macro variables.';" onMouseOut="window.status=''">a 
          series of macro variables</a>, a <a href="m51_30.htm" onClick="suggestBack()" onMouseOver="window.status='Display details on multidimensional arrays.';" onMouseOut="window.status=''">varying 
          number of macro variables</a>, or a single macro variable that records 
          a value that is created by <a href="m51_32.htm" onClick="suggestBack()" onMouseOver="window.status='Display details on concatenating values.';" onMouseOut="window.status=''">concatenating 
          values</a> of another variable. You can use the <a href="m51_27.htm" onClick="suggestBack()" onMouseOver="window.status='Display details on the NOPRINT option.';" onMouseOut="window.status=''">NOPRINT 
          option</a> to prevent a PROC SQL step from creating output.</p>
        <p><strong>Using Macro Variables in SCL Programs</strong><br>
          SAS Component Language (SCL) also has routines and functions that assign 
          values to macro variables and that obtain values from a macro symbol 
          table. The SYMPUT routine and the SYMGET function can be used in an 
          SCL program in the same way that they can be used in a DATA step program. 
          Also, the <a href="m51_37.htm" onClick="suggestBack()" onMouseOver="window.status='Display details on the SYMPUTN routine.';" onMouseOut="window.status=''">SYMPUTN 
          routine</a> can be used to create macro variables and to assign numeric 
          values to those variables during the execution of an SCL program. The 
          <a href="m51_37.htm" onClick="suggestBack()" onMouseOver="window.status='Display details on the SYMGETN function.';" onMouseOut="window.status=''">SYMGETN function</a> can be used to obtain the numeric value of a macro variable 
          during the execution of an SCL program. </p>
    </td>
  </tr>
</table>
<!-- InstanceEndEditable --> <br>
<table cellpadding=0 cellspacing=0 border=0 width="85%" align="center">
  <tr> 
    <td align="left"> 
      <hr>
    </td>
  </tr>
</table>

<P><!-- InstanceBeginEditable name="syntax" --> 
<center>
  <TABLE cellpadding=0 cellspacing=0 border=0 width="85%">
    <TR> 
      <TD><STRONG><A NAME="Syntax">Syntax</A></STRONG> 
        <P> <EM>To go to the page where a statement or option was presented, select 
          a link.</EM> 
      </TD>
    </TR>
  </TABLE>
  <br>
</center>
<P align="center"> 
  <TABLE CELLPADDING="2" align="center">
    <TR> 
      <TD><blockquote> 
          <dl>
            <font color="#003399"><strong>CALL SYMPUT</strong><A HREF="m51_4.htm" onClick="suggestBack()"
	      onMouseOver="window.status='Display details on the SYMPUT routine.'; "
	      onMouseOut="window.status=''">(<em>macro-variable</em>,<em>text</em>);</A> 
            </font> 
          </dl>
        </blockquote></TD>
    </TR>
    <TR> 
      <TD><blockquote>
          <dl>
            <font color="#003399"><A HREF="m51_12.htm" onClick="suggestBack()"
	      onMouseOver="window.status='Display details on the PUT function.'; "
	      onMouseOut="window.status=''"><strong>PUT</strong>(<em>source</em>,<em>format</em>)</a> 
            </font>
          </dl>
        </blockquote></TD>
    </TR>
    <TR> 
      <TD><blockquote>
          <dl>
            <font color="#003399"><strong>CALL SYMPUT</strong><A HREF="m51_15.htm" onClick="suggestBack()"
	      onMouseOver="window.status='Display details on the SYMPUT routine with two expressions.'; "
	      onMouseOut="window.status=''">(<em>expression1</em>,<em>expression2</em>);</A> 
            </font>
          </dl>
        </blockquote></TD>
    </TR>
    <TR>
      <TD> <blockquote> <font color="#003399"><nobr><strong><A HREF="m51_37.htm" onClick="suggestBack()"
	      onMouseOver="window.status='Display details on the SYMPUTN routine.'; "
	      onMouseOut="window.status=''">CALL SYMPUTN</a> </strong>(<em>'macro-variable'</em>, 
          <em>value</em>)<strong>;</strong></nobr></font> </blockquote></TD>
    </TR>
	 <TR> 
      <TD height="20"> <blockquote>
          <dl>
            <dt><font color="#003399"><A HREF="m51_24.htm" onClick="suggestBack()"
	      onMouseOver="window.status='Display details on the SYMGET function.'; "
	      onMouseOut="window.status=''"><strong>SYMGET</strong>(<em>macro-variable</em>)</A> 
              </font></dt>
          </dl>
        </blockquote></TD>
    </TR>
    <TR>
      <TD> <blockquote> <font color="#003399"><A HREF="m51_37.htm" onClick="suggestBack()"
	      onMouseOver="window.status='Display details on the SYMGETN function.'; "
	      onMouseOut="window.status=''"><nobr><strong>SYMGETN </strong>(<em>'macro-variable'</em>)<strong>;</strong></nobr></A></font> 
        </blockquote></TD>
    </TR>
    <TR> 
      <TD><blockquote>
          <dl><dt><Font color="#003399"><strong>PROC SQL NOPRINT;</strong></font></dt>
            <font color="#003399">
            <dt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>SELECT</strong> <em>column1</em>,<<em>column2</em>,...> 
              <A HREF="m51_27.htm" onClick="suggestBack()"
	      onMouseOver="window.status='Display details on the INTO clause.'; "
	      onMouseOut="window.status=''"><strong>INTO</strong> :<em>macro-variable-1</em><,:<em>macro-variable-2</em>,...></A></dt>
            <dt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>FROM</strong> <em>table-1 | view-1</em></dt>
            <dt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;<strong>WHERE</strong> <em>expression&gt;</em></dt>
            <dt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<em>&lt;other clauses&gt;</em>;</dt>
            </font>
			<dt><font color="#003399"><strong>QUIT;</strong></font></dt>
          </dl>
        </blockquote></TD>
    </TR>
    <TR> 
      <TD><blockquote>
          <dl><dt><Font color="#003399"><strong>PROC SQL NOPRINT;</strong></font></dt>
            <font color="#003399">
            <dt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>SELECT</strong> <em>column1</em> <A HREF="m51_28.htm" onClick="suggestBack()"
	      onMouseOver="window.status='Display details on the INTO clause for a range of variables.'; "
	      onMouseOut="window.status=''"><strong>INTO :<em>macro-variable-1</em> 
              - :<em>macro-variable-n</em></strong></A></dt>
            <dt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>FROM</strong> <em>table-1 | view-1</em></dt>
            <dt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;<strong>WHERE</strong> <em>expression&gt;</em></dt>
            <dt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<em>&lt;other clauses&gt;</em>;</dt>
            </font>
			<dt><font color="#003399"><strong>QUIT;</strong></font>
          </dl>
        </blockquote></TD>
    </TR>
    <TR> 
      <TD><blockquote>
          <dl><dt><font color="#003399"><strong>PROC SQL NOPRINT;</strong></font></dt>
            <font color="#003399">
            <dt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>SELECT</strong> <em>column1</em></dt>
            <dt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="m51_32.htm" onClick="suggestBack()"
	      onMouseOver="window.status='Display details on the INTO clause for combining values.'; "
	      onMouseOut="window.status=''"><strong>INTO</strong> :<em>macro-variable-1</em> </a></dt>
              <dt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="m51_32.htm" onClick="suggestBack()"
	      onMouseOver="window.status='Display details on the INTO clause for combining values.'; "
	      onMouseOut="window.status=''"><strong>SEPARATED BY</strong> '<em>delimiter1</em>'</A></dt>
            <dt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>FROM</strong> <em>table-1 | view-1</em></dt>
            <dt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;<strong>WHERE</strong> <em>expression&gt;</em></dt>
            <dt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<em>&lt;other clauses&gt;</em>;</dt>
            </font>
			<dt><font color="#003399"><strong>QUIT;</strong></font></dt>
          </dl>
        </blockquote></TD>
    </TR>
   
  </TABLE>
<P align="center"> 
<center>
  <TABLE cellpadding=0 cellspacing=0 border=0 width="85%">
    <TR> 
      <TD align="left"> 
        <HR>
      </TD>
    </TR>
  </TABLE>
  <br>
</center>
<!-- InstanceEndEditable -->
<P> 
  <!-- InstanceBeginEditable name="sampleprogram" --> 
  <TABLE cellpadding=0 cellspacing=0 border=0 width="85%">
    <TR> 
      <TD align="left"><STRONG><A NAME="Sample">Sample Programs</A></STRONG> 
       <P><blockquote><strong>Using CALL SYMPUT to Create Macro Variables</strong></blockquote>
	   <pre><font color="#003399">     options symbolgen pagesize=30;
     %let crsnum=3;
     data revenue;
        set sasuser.all end=final;
        where course_number=&amp;crsnum;
        total+1;
        if paid='Y' then paidup+1;
        if final then do;
           if paidup&lt;total then do;
              <strong>call symput('foot','Some Fees Are Unpaid');</strong>
           end;
           else do;
              <strong>call symput('foot','All Students Have Paid');</strong>
           end;
        end;
     run;
     proc print data=revenue;
        var student_name student_company paid;
        title &quot;Payment Status for Course &amp;crsnum&quot;;
        footnote &quot;&amp;foot&quot;;
     run;
</font></pre>

<P><blockquote><strong>Referencing Macro Variables Indirectly</strong></blockquote>
<pre><font color="#003399">     options symbolgen;
     data _null_;
        set sasuser.courses;
        call symput(course_code, trim(course_title));
     run;

     <strong>%let crsid=C005;</strong>
     proc print data=sasuser.schedule noobs label;
        where course_code=&quot;&amp;crsid&quot;;
        var location begin_date teacher;
        title1 &quot;Schedule for <strong>&amp;&amp;&amp;crsid</strong>&quot;;
     run;

     <strong>%let crsid=C002;</strong>
     proc print data=sasuser.schedule noobs label;
        where course_code=&quot;&amp;crsid&quot;;
        var location begin_date teacher;
        title1 &quot;Schedule for <strong>&amp;&amp;&amp;crsid</strong>&quot;;
     run;
</font></pre>
<P><blockquote><strong>Using SYMGET to Obtain Macro Variable Values</strong></blockquote>
<pre><font color="#003399">     data teachers;
        set sasuser.register;
        length Teacher $ 20;
        teacher=symget('teach'||left(course_number));
     run;

     proc print data=teachers;
        var student_name course_number teacher;
     title1 &quot;Teacher for Each Registered Student&quot;;
     run;
</font></pre>
<P><blockquote><strong>Creating Macro Variables with the INTO Clause</strong></blockquote>
        <pre><font color="#003399">     proc sql noprint;
        select course_code, location, begin_date format=mmddyy10.
           <strong>into :crsid1-:crsid3,
                :place1-:place3,
                :date1-:date3</strong>
           from sasuser.schedule
           where year(begin_date)=2002
           order by begin_date;
     quit;
</font></pre>
        <P> 
        <HR>
      </TD>
    </TR>
  </TABLE>
  <br>
  <!-- InstanceEndEditable --> 
<P>
  <!-- InstanceBeginEditable name="pointstoremember" --> 
  <TABLE cellpadding=0 cellspacing=0 border=0 width="85%">
    <TR> 
      <TD align="left"><STRONG><A NAME="Points">Points to Remember</A></STRONG> 
        <UL>
          <LI> The SYMPUT routine can be used to create or update macro variables during DATA step execution.<BR>
            <BR>
	<LI>The values of macro variables are always character values. In the DATA step,
	SYMPUT performs automatic conversion on any numeric value 
	that you attempt to assign to a macro variable.<br><br>
          <LI>The SYMGET function can be used to obtain the value of a macro variable during the execution of a DATA step, a 
	PROC SQL step, or an SCL program.<BR>
            <BR>
          <LI>The INTO clause can be used in the SELECT statement to create or update macro variables during execution of a PROC SQL step.<BR><BR> 
	  <LI>The SYMPUT and SYMPUTN routines can be used to create or update macro variables during the execution of an SCL program.      
	</UL>
      </TD>
    </TR>
  </TABLE>
  <!-- InstanceEndEditable --></center>
<script>writeNav_regular_bottom();</script>
</body>
<!-- InstanceEnd --></html>