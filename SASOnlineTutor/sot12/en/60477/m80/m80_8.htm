<html><!-- InstanceBegin template="/Templates/informationObject.dwt" codeOutsideHTMLIsLocked="false" -->
<head>
<SCRIPT LANGUAGE="JavaScript" SRC="../tut.js"></SCRIPT>
<script language="JavaScript" src="../nav.js"></script>
<SCRIPT LANGUAGE="JavaScript">
 setPageTitle();
 setCookie();
  
// Drop down menu link- © Dynamic Drive (www.dynamicdrive.com)
// For full source code and 100's more DHTML scripts, visit http://www.dynamicdrive.com
// Credit MUST stay intact for use -->

</SCRIPT>

<!-- InstanceBeginEditable name="extrascript" -->
<SCRIPT LANGUAGE="JavaScript">
</SCRIPT>
<!-- InstanceEndEditable -->

<link rel="stylesheet" href="../tut.css">


<META http-equiv="Content-Type" content="text/html; charset=windows-1252">
</HEAD>

<body marginheight="0" marginwidth="0" topmargin="0" leftmargin="0" rightmargin="0" bgcolor="#FFFFF0">
<script>writeinformationObjectTopNav1();</script>
	  
	  <font color="#003399" size="3" face="Arial, Helvetica, sans-serif"><strong><!-- InstanceBeginEditable name="TopicTitle" -->Using 
      Benchmarks to Compare Techniques<!-- InstanceEndEditable --></strong></font> <!-- InstanceBeginEditable name="continued" --><!-- InstanceEndEditable -->
	  
<script>writeinformationObjectTopNav2();</script>
<br>
<center>
  <!-- InstanceBeginEditable name="content" --> 
  <table width="85%" border="0" cellpadding="0" cellspacing="0">
    <tr valign="top"> 
      <td> To decide which SAS programming technique is most efficient for a particular 
        task, you can <strong>benchmark</strong> (measure and compare) the resource 
        usage for each technique that you are comparing. 
        <p><br>
        <h2>Guidelines for Benchmarking</h2>
        <p>Your benchmarking is most likely to yield useful results if you follow 
          these guidelines:<br>&nbsp;
        </p>
        <ul>
          <li><strong>Before you test the programming techniques, turn on the 
            SAS system options that report resource usage.</strong><br>
            <p>As explained earlier, to track and report on resource utilization, 
              you can use some or all of the system options STIMER, MEMRPT, FULLSTIMER, 
              and STATS. The availability, usage, and functionality of these options 
              vary by operating environment. You can also specify MSGLEVEL=I to 
              display additional notes in the SAS log. </p>
            <table border="0" align="center" cellpadding="2" cellspacing="0">
              <tr> 
                <td valign="top" width="24"><img src="../navimages/note.gif" width="20" height="20" alt="Note"></td>
                <td valign="top">For more information about the SAS system option 
                  MSGLEVEL=, see the lesson 
                  <!--lesson reference-->
                  <strong> 
                  <script>document.write(m54title);</script>
                  </strong> or the lesson 
                  <!--lesson reference-->
                  <strong> 
                  <script>document.write(m74title);</script>.</strong></td>
              </tr>
            </table>
            <br>
            <br>
          </li>
          <li> <strong>Execute the code for each programming technique in a separate 
            SAS session. </strong><br>
            <p>If the program that you are benchmarking is not large, you can 
              optimize it by changing individual programming techniques, one at 
              a time, and running the entire program after each change to measure 
              the effect on resource usage. However, a more complex program might 
              be easier to optimize by identifying the steps that use the most 
              resources and extracting those steps into separate programs. You 
              can measure the effects of different programming techniques by repeatedly 
              changing, running, and measuring the separate programs. When isolating 
              parts of your program, be careful to measure their resource usage 
              under the conditions in which they are used in the complete program.</p>
            <table border="0" align="center" cellpadding="2" cellspacing="0">
              <tr> 
                <td valign="top" width="24"><img src="../navimages/note.gif" width="20" height="20" alt="Note"></td>
                <td valign="top">The first time that program code (including the 
                  DATA step, functions and formats, and SAS procedures) is referenced, 
                  the operating system might have to load the code into memory 
                  or assign virtual address space to it. The first time data is 
                  read, it is often loaded into a cache from which it can be retrieved 
                  more quickly the next time it is read. The resource usage that 
                  is required for performing these actions is called overhead. 
                </td>
              </tr>
            </table>
            <br>
            <br>
          </li>
          <li><strong>In each programming technique that you are testing, include 
            only the SAS code that is essential for performing the task.</strong><br>
            <br>
            If you include too many elements in the code for each technique, you 
            will not know what caused the results. <br>
            <br>
            <br>
          </li>
          <li><strong>If your system is doing other work at the same time you 
            are running your benchmarking tests, be sure to run the code for each 
            programming technique several times.</strong><br>
            <p>Running the code several times reduces any variability in resource 
              consumption that is associated with other work that the system is 
              doing. How you handle multiple measurements depends on the resource, 
              as indicated below:</p>
            <ul>
              <li>Use the minimum <strong>real time</strong> and <strong>CPU time</strong> 
                measurements, because these represent most closely the amount 
                of time your programming technique actually requires. The larger 
                time values (especially in the case of real time) are the result 
                of interference from other work that the computer was doing while 
                your program ran.<br>
                <br>
              </li>
              <li>The amount of <strong>memory</strong> shouldn't vary from trial 
                to trial. If memory does vary, it's possible that your program 
                sometimes shares a resource with another program. In this situation, 
                you must determine whether the higher or lower memory consumption 
                is more likely to be the case when your program is used in production.<br>
                <br>
              </li>
              <li><strong>I/O</strong> can be an especially elusive resource to 
                measure. With modern file systems and storage systems, the effect 
                of your program on the I/O activity of the computer sometimes 
                has to be observed by operating system tools, file system tools, 
                or storage system tools because it cannot be captured by your 
                SAS session. Data is often aggressively cached by modern file 
                systems and storage systems, and file caches are greatly affected 
                by other activity in the file system. Be as realistic as you can 
                about measuring I/O&#8212;it is possible to achieve good performance 
                on a system that is not doing other work, but performance is likely 
                to worsen when the application is deployed in a more realistic 
                environment.<br>
                <br>
                <br>
              </li>
            </ul>
          </li>
          <li><strong>Run your benchmarking tests under the conditions in which 
            your final program will run.<br>
            <br>
            </strong>Results might vary under different conditions, so it is important 
            to control the conditions under which your benchmarks are tested. 
            For example, if batch execution and large data sets are used in your 
            environment, you should incorporate these conditions into your benchmarking 
            environment.<strong> <br>
            <br>
            <br>
            </strong></li>
          <li><strong>After testing is finished, consider turning off the options 
            that report resource usage.</strong><br>
            <br>
            The options that report resource usage consume resources. If it is 
            a higher priority in your environment to minimize resource usage than 
            to periodically check an application's resource usage, then it is 
            most efficient to turn off these options. 
            <p> 
            <table border="0" cellpadding="2" cellspacing="0">
              <tr> 
                <td valign="top" width="24"><img src="../navimages/note.gif" width="20" height="20" alt="Note"></td>
                <td valign="top"><p>To turn off the FULLSTIMER option, use the 
                    following statement:</p>
                  <pre><font color="#003399">     options nofullstimer;</font></pre></td>
              </tr>
            </table>
          </li>
        </ul>
      </td>
    </tr>
  </table>


  
  <!-- InstanceEndEditable --> 
</center>
<script>writeNav_regular_bottom();</script>
</body>
<!-- InstanceEnd --></html>
