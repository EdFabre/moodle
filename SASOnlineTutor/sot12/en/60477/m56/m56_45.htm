<html><!-- InstanceBegin template="/Templates/summary.dwt" codeOutsideHTMLIsLocked="false" -->
<head>

<SCRIPT LANGUAGE="JavaScript" SRC="../tut.js"></SCRIPT>
<script language="JavaScript1.2" src="../nav.js"></script>


<SCRIPT LANGUAGE="JavaScript">
 setPageTitle();
 setCookie();
 
// Drop down menu link- © Dynamic Drive (www.dynamicdrive.com)
// For full source code and 100's more DHTML scripts, visit http://www.dynamicdrive.com
// Credit MUST stay intact for use -->

</SCRIPT>

<!-- InstanceBeginEditable name="extrascript" -->
<SCRIPT LANGUAGE="JavaScript">
</SCRIPT>
<!-- InstanceEndEditable -->

<link rel="stylesheet" href="../tut.css">

<META http-equiv="Content-Type" content="text/html; charset=windows-1252">
</HEAD>

<body marginheight="0" marginwidth="0" topmargin="0" leftmargin="0" rightmargin="0" bgcolor="#FFFFF0">
<script>writeinformationObjectTopNav1();</script>
 
      <font color="#003399" size="3" face="Arial, Helvetica, sans-serif"><strong><script>document.write(summaryTitle)</script></strong></font>
 
 
<script>writeinformationObjectTopNav2();</script>
<br>
<center><TABLE cellpadding=0 cellspacing=0 border=0 width="85%" align="center">
  <TR>
      <TD align="left">
      
      <p><script>document.write(summaryPageContains)</script></p>
     <ul><!-- InstanceBeginEditable name="links" -->
        <LI> <A HREF="#Text" onMouseOver="window.status='Go to the text summary section.'; "
		onMouseOut="window.status=''">a text summary of the material taught in 
          the lesson</A> 
        <LI> <A HREF="#Syntax" onMouseOver="window.status='Go to the syntax section.'; "
		onMouseOut="window.status=''">syntax for&nbsp;statements and options</A> 
          <LI> <A HREF="#Sample" onMouseOver="window.status='Go to the sample program section.'; "
		onMouseOut="window.status=''">sample programs</A> 
          <LI> <A HREF="#Points" onMouseOver="window.status='Go to the points to remember section.'; "
		onMouseOut="window.status=''">points to remember</A>.
      <!-- InstanceEndEditable --></ul>
<P>
	  <HR>
      </TD>
    </TR>
  </TABLE>
  <P>

<!-- InstanceBeginEditable name="textsummaryintro" -->     
<TABLE cellpadding=0 cellspacing=0 border=0 width="85%" align="center">
  <TR>
	<TD align="left"><h2><STRONG><A NAME="Text"><script>document.write(summaryPageTextSummaryTitle);</script></A></STRONG> </h2>
      <P>
	  <EM><script>document.write(summaryPageDirections);</script></EM></TD>
      </TR>
    </TABLE>
<!-- InstanceEndEditable -->
  <br>
<!-- InstanceBeginEditable name="textsummary" --> 
<table width="85%" border="0" cellpadding="0" cellspacing="0" align="center">
  <tr valign="top"> 
    <td> <p><strong>Reviewing Terminology</strong> <br>
          You can review <a href="m56_2.htm" onClick="suggestBack()">definitions</a> 
          of terms that are important in this lesson. You can also review diagrams 
          and descriptions of the various <a href="m56_3.htm" onClick="suggestBack()">relationships 
          between input sources</a> for a table lookup operation.</p>
	 <p><strong>Working with Lookup Values Outside of SAS Data Sets</strong> <br>
          You can use the <a href="m56_5.htm" onClick="suggestBack()">IF-THEN/ELSE statement</a> 
          in the DATA step to combine data from a base table with lookup values that are not stored 
          in a SAS data set. You can also use the <a href="m56_7.htm" onClick="suggestBack()">FORMAT procedure</a>
          or the <a href="m56_6.htm" onClick="suggestBack()">ARRAY statement</a> 
		  to combine data from a base table with lookup values that are not stored in a           
		  SAS data set.</p>
      <p><strong>Combining Data with the DATA Step Match-Merge</strong> <br>
          You can use the <a href="m56_10.htm" onClick="suggestBack()">MERGE statement</a> 
          in the DATA step to combine data from multiple data sets as long as 
          the input data sets have a common variable. You can merge more than 
          two data sets <a href="m56_11.htm" onClick="suggestBack()">that lack 
          a common variable</a> in multiple DATA steps if each input data set 
          contains at least one variable in it that is also in at least one other 
          input data set.</p>
        <p><strong>Using PROC SQL to Join Data</strong> <br>
          You can also use <a href="m56_16.htm" onClick="suggestBack()">PROC SQL</a> 
          to join data from multiple data sets if there is no single variable 
          that is common to all input data sets. In a PROC SQL step, you can choose 
          only the specific variables from each input data set that you want to 
          include in the new data set. If you create a new table with the results 
          of an inner join in a PROC SQL step, the results can 
          be very similar to the results of a DATA step match-merge. </p>
		  
        <p><strong>Comparing DATA Step Match-Merges and PROC SQL Joins </strong> 
          <br>
          It is possible to create identical results with a basic DATA step match-merge 
          and a PROC SQL join. However, there are significant differences between 
          these two methods, as well as <a href="m56_18.htm" onClick="suggestBack()">advantages 
          and disadvantages</a> to each. In some cases, such as when there is 
          a one-to-one or a one-to-many match on values of the BY variables in 
          the input data sets, these two methods produce <a href="m56_19.htm" onClick="suggestBack()">identical 
          results</a>. In other cases, such as when there is a many-to-many match 
          on values of the BY variables, or if there are nonmatching values of 
          the BY variables, these two methods will produce <a href="m56_20.htm" onClick="suggestBack()">different 
          results</a>. These differences reflect the fact that the processing 
          is different for a <a href="m56_21.htm" onClick="suggestBack()">DATA 
          step match-merge</a> and a <a href="m56_22.htm" onClick="suggestBack()">PROC 
          SQL join</a>. Even if you are working with many-to-many matches or nonmatching 
          data, it is possible to use other DATA step techniques such as <a href="m56_24.htm" onClick="suggestBack()">multiple 
          SET statements</a> to create results that are identical to the results 
          that a PROC SQL step creates.</p>
        <p><strong>Combining Summary Data and Detail Data </strong> <br>
          In order to perform tasks such as calculating percentages based on individual 
          values from a data set as compared to a summary statistic of the data, 
          you need to <a href="m56_27.htm" onClick="suggestBack()">combine summary 
          data and detail data</a>. One way to create a summary data set is to 
          use <a href="m56_28.htm" onClick="suggestBack()">PROC MEANS</a>. Once 
          you have a summary data set, you can use multiple SET statements to 
          combine the summary data with the detail data in the original data set. 
          It is also possible to create summary data with a <a href="m56_32.htm" onClick="suggestBack()">sum 
          statement</a> and to combine it with detail data in one DATA step.</p>
        <p><strong>Using an Index to Combine Data </strong> <br>
          You can use an <a href="m56_36.htm" onClick="suggestBack()">index to 
          combine data</a> from matching observations in multiple data sets if 
          the index is built on variables that are common to all input data sets. 
          Especially if one of the input data sets is very large, an index can 
          improve the efficiency of the merge. You use the <a href="m56_37.htm" onClick="suggestBack()">KEY= 
          option</a> in a SET statement in conjunction with another SET statement 
          to use an index to combine data. However, this method might result in 
          <a href="m56_41.htm" onClick="suggestBack()">data errors</a> in the output data set. You can use the <a href="m56_42.htm" onClick="suggestBack()"><code>_IORC_</code> 
          variable</a> to prevent unmatched data from being included in the output 
          data set.<br>
        </p>
        </td>
  </tr>
</table>
<!-- InstanceEndEditable --> <br>
<table cellpadding=0 cellspacing=0 border=0 width="85%" align="center">
  <tr> 
    <td align="left"> 
      <hr>
    </td>
  </tr>
</table>

<P><!-- InstanceBeginEditable name="syntax" -->
  <TABLE cellpadding=0 cellspacing=0 border=0 width="85%" align="center">
    <TR> 
      <TD><h2><STRONG><A NAME="Syntax">Syntax</A></STRONG> </h2>
        <P> <EM>To go to the page where a statement or option was presented, select 
          a link.</EM>
      </TD>
    </TR>
  </TABLE>
  <br>
<P> 

<TABLE CELLPADDING="2" align="center">
<TR><TD><FONT color="#003399"><dl>
          <dt><A HREF="m56_28.htm" onClick="suggestBack()" onMouseOver="window.status='Display details on the MEANS Procedure.'; "
	      onMouseOut="window.status=''"><STRONG>PROC MEANS DATA=</STRONG><EM>original-SAS-data-set</EM> 
            <STRONG>NOPRINT</STRONG><strong>;</strong></A></dt>
		 <dt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;<strong>VAR</strong> <em>variable(s)</em>;&gt;</dt>
		  <dt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>OUTPUT OUT=</strong><em>output-SAS-data-set statistic=output-variable(s)</em><strong>;</strong></a></dt>
		  <dt> <strong>RUN</strong>;</dt>
        </dl></FONT>
</TD></TR>
  <TR> 
    <TD><FONT color="#003399"><dl>
          <dt><strong>DATA</strong> <EM>libref.data-set-name</EM><strong>; </strong></dt>
          <dt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>SET</strong> <em>SAS-data-set-name</em><strong>;</strong></dt>
		  <dt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="m56_37.htm" onClick="suggestBack()" onMouseOver="window.status='Display details on the KEY= option.'; "
	      onMouseOut="window.status=''"><STRONG>SET</STRONG> <EM>SAS-data-set-name</EM> 
            <STRONG>KEY=</STRONG><em>index-name</em><strong>;</strong></A></dt>
		 <dt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="m56_31.htm" onClick="suggestBack()" onMouseOver="window.status='Display details on the sum statement.'; "
	      onMouseOut="window.status=''"><em>variable</em><strong>+</strong><em>expression</em><strong>;</strong></a></dt>
		  <dt> <strong>RUN;</strong></dt>
        </dl></FONT></TD>
  </TR>
   
</TABLE>


  <TABLE cellpadding=0 cellspacing=0 border=0 width="85%" align="center">
    <TR> 
      <TD align="left"> 
        <HR>
      </TD>
    </TR>
  </TABLE>
  <br>
<!-- InstanceEndEditable -->
<P> 
  <!-- InstanceBeginEditable name="sampleprogram" --> 
  <TABLE cellpadding=0 cellspacing=0 border=0 width="85%" align="center">
    <TR> 
      <TD align="left"><h2><STRONG><A NAME="Sample">Sample Programs</A></STRONG> 
        </h2><P>
		<blockquote><strong>Combining Data with the IF-THEN/ELSE Statement</strong></blockquote>
		<font color="#003399">
        <pre>     data mylib.employees_new;
        set mylib.employees;
        if IDnum=1001 then Birthdate='01JAN1963'd;
        else if IDnum=1002 then Birthdate='08AUG1946'd;
        else if IDnum=1003 then Birthdate='23MAR1950'd;
        else if IDnum=1004 then Birthdate='17JUN1973'd;
     run;</pre>
        </font>
		<blockquote><table border="0" cellpadding="2" cellspacing="0">
      <tr> 
        <td valign="top" width="24"><img src="../navimages/note.gif" width="20" height="20" alt="Note"></td>
              <td valign="top">The DATA step shown above will not run in your 
                SAS session because <strong>Mylib.Employees</strong> is not included 
                in the practice data.</td>
      </tr>
    </table></blockquote>
		<blockquote><strong>Combining Data with the ARRAY Statement</strong></blockquote>
		<font color="#003399">
        <pre>     data mylib.employees_new;
        array birthdates{1001:1004} _temporary_ ('01JAN1963'd
              '08AUG1946'd '23MAR1950'd '17JUN1973'd);
        set mylib.employees;
        Birthdate=birthdates(IDnum);
     run;</pre>
        </font>
		<blockquote><table border="0" cellpadding="2" cellspacing="0">
      <tr> 
        <td valign="top" width="24"><img src="../navimages/note.gif" width="20" height="20" alt="Note"></td>
              <td valign="top">The DATA step shown above will not run in your 
                SAS session because <strong>Mylib.Employees</strong> is not included 
                in the practice data.</td>
      </tr>
    </table></blockquote>
		<blockquote><strong>Combining Data with the FORMAT Procedure</strong></blockquote>
		<font color="#003399">
        <pre>     proc format;
        value $birthdate '1001' = '01JAN1963'
                         '1002' = '08AUG1946'
                         '1003' = '23MAR1950'
                         '1004' = '17JUN1973';
     run;
     
     data mylib.employees_new;
        set mylib.employees;
        Birthdate=input(put(IDnum,$birthdate.),date9.);
     run;</pre>
        </font>
		<blockquote><table border="0" cellpadding="2" cellspacing="0">
      <tr> 
        <td valign="top" width="24"><img src="../navimages/note.gif" width="20" height="20" alt="Note"></td>
              <td valign="top">The PROC FORMAT and DATA steps shown above will 
                not run in your SAS session because <strong>Mylib.Employees</strong> 
                is not included in the practice data.</td>
      </tr>
    </table></blockquote>
		<blockquote><strong>Performing a DATA Step Match-Merge</strong></blockquote>
		<font color="#003399">
        <pre>     proc sort data=sasuser.expenses out=expenses;
        by flightid date;
     run;
	 
     proc sort data=sasuser.revenue out=revenue;
        by flightid date;
     run;
	 
     data revexpns (drop=rev1st revbusiness revecon 
          expenses);
        merge expenses(in=e) revenue(in=r);
        by flightid date;
        if e and r;
        Profit=sum(rev1st, revbusiness, revecon, 
               -expenses);
     run;
	 
     proc sort data=revexpns;
        by dest;
     run;
	 
     proc sort data=sasuser.acities out=acities;
        by code;
     run;
     
     data sasuser.alldata;
        merge revexpns(in=r) acities 
              (in=a rename=(code=dest) 
              keep=city name code);
        by dest;
        if r and a;
     run;</pre>
        </font>
		<blockquote><strong>Performing a PROC SQL Join</strong></blockquote>
		<font color="#003399">
        <pre>     proc sql;
        create table sqljoin as
        select revenue.flightid, 
               revenue.date format=date9.,
               revenue.origin, revenue.dest, 
               sum(revenue.rev1st,
                   revenue.revbusiness,
                    revenue.revecon)
               -expenses.expenses as Profit,
               acities.city, acities.name
        from sasuser.expenses, sasuser.revenue, 
             sasuser.acities
        where expenses.flightid=revenue.flightid
              and expenses.date=revenue.date
              and acities.code=revenue.dest
        order by revenue.dest, revenue.flightid,
                 revenue.date;
     quit;</pre>
        </font>
			<blockquote><strong>Working with a Many-to-Many Match</strong></blockquote>
		<font color="#003399">
        <pre>     proc sql;
        create table flightemp as
        select flightschedule.*, firstname, lastname 
           from sasuser.flightschedule, sasuser.flightattendants 
           where flightschedule.empid=flightattendants.empid;
     quit;
	 
     data fightemps3(drop=empnum jobcode)
        set sasuser.flightschedule;
        do i=1 to num;
           set sasuser.flightattendants
               (rename=(empid=empnum))
                nob=num point=i;
           if empid=empnum then output;
        end;
     run;</pre>
        </font>
        <blockquote><strong>Combining Summary Data and Detail Data</strong></blockquote>
		
        <font color="#003399"> 
        <pre>     proc means data=sasuser.monthsum noprint;
        var revcargo;
        output out=sasuser.summary sum=Cargosum;
     run;

     data sasuser.percent1;
        if _n_=1 then set sasuser.summary 
                          (keep=cargosum);
        set sasuser.monthsum 
            (keep=salemon revcargo);
        PctRev=revcargo/cargosum;
     run;</pre>
        </font>
	 <font color="#003399">
        <pre>     data sasuser.percent2(drop=totalrev);
        if _n_=1 then do until(lastobs);
           set sasuser.monthsum(keep=revcargo)
               end=lastobs;
           totalrev+revcargo;
        end;
        set sasuser.monthsum (keep=salemon revcargo);
        PctRev=revcargo/totalrev;
     run;</pre>
        </font>
	<blockquote> <strong>Using an Index to Combine Data</strong></blockquote>
	 <font color="#003399">
        <pre>     data work.profit work.errors;
        set sasuser.dnunder;
        set sasuser.sale2000(keep=routeid 
            flightid date rev1st revbusiness
            revecon revcargo)key=flightdate;
        if _iorc_=0 then do;
           Profit=sum(rev1st, revbusiness, revecon, 
                  revcargo, -expenses);
           output work.profit;
        end;
        else do;
           _error_=0;
           output work.errors;
        end;
     run;</pre>
        </font>
        <P> 
        <HR>
      </TD>
    </TR>
  </TABLE>
  <br>
  <!-- InstanceEndEditable --> 
<P>
  <!-- InstanceBeginEditable name="pointstoremember" --> 
  <TABLE cellpadding=0 cellspacing=0 border=0 width="85%" align="center">
    <TR> 
      <TD align="left"><h2><STRONG><A NAME="Points">Points to Remember</A></STRONG> 
        </h2>
        <UL>
          <LI> In a DATA step match-merge, you can use the RENAME= option to give identical 
            names to variables in input data sets if those variables record the 
            same information in values that have the same type and length.<BR>
            <BR>
          <LI>You use the OUTPUT statement and the NOPRINT option with the MEANS 
            procedure if you want the results to be routed to an output data set 
            and the default report to be suppressed.<BR>
            <BR>
          <LI>The automatic variable _N_ keeps track of how many times a DATA 
            step has iterated. The _N_ variable is useful when you are combining 
            data from a summary data set with data from a larger detail data set. 
        </UL>
      </TD>
    </TR>
  </TABLE>
  <br>
<!-- InstanceEndEditable --></center>
<script>writeNav_regular_bottom();</script>
</body>
<!-- InstanceEnd --></html>