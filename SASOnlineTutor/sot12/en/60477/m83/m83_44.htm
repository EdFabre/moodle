<html><!-- InstanceBegin template="/Templates/opt_summary.dwt" codeOutsideHTMLIsLocked="false" -->
<head>

<SCRIPT LANGUAGE="JavaScript" SRC="../tut.js"></SCRIPT>
<script language="JavaScript" src="../nav.js"></script>

<SCRIPT LANGUAGE="JavaScript">
 setPageTitle();
 setCookie();
 
// Drop down menu link- © Dynamic Drive (www.dynamicdrive.com)
// For full source code and 100's more DHTML scripts, visit http://www.dynamicdrive.com
// Credit MUST stay intact for use -->

</SCRIPT>

<!-- InstanceBeginEditable name="extrascript" -->
<SCRIPT LANGUAGE="JavaScript">
</SCRIPT>
<!-- InstanceEndEditable -->

<link rel="stylesheet" href="../tut.css">

<META http-equiv="Content-Type" content="text/html; charset=windows-1252">
</HEAD>

<body marginheight="0" marginwidth="0" topmargin="0" leftmargin="0" rightmargin="0" bgcolor="#FFFFF0">
<script>writeinformationObjectTopNav1();</script>
      
	  <font color="#003399" size="3" face="Arial, Helvetica, sans-serif"><strong>
      <script>document.write(summaryTitle)</script>
      </strong></font>
	  
	  
<script>writeinformationObjectTopNav2();</script>

<br>
<TABLE cellpadding=0 cellspacing=0 border=0 width="85%" align="center">
  <TR>
	<TD align="left">
	  <EM><script>document.write(summaryPageDirections);</script></EM></TD>
      </TR>
    </TABLE>
  <br>
<table width="85%" border="0" align="center" cellpadding="0" cellspacing="0">
  <tr valign="top"> 
    <td><!-- InstanceBeginEditable name="TextSummary" --> 
      <p><strong>Executing Only Necessary Statements</strong><br>
        <strong> </strong>You minimize the CPU time that SAS uses when you execute 
        the minimum number of statements in the most efficient order. 
      <p>For a more efficient program, place <a href="m83_2.htm" onClick="suggestBack()">the 
        subsetting IF statement</a> as soon as logically possible in a DATA step 
        when creating a subset of data.</p>
      <p>Review guidelines for <a href="m83_6.htm" onClick="suggestBack()">using 
        conditional logic efficiently</a> with IF-THEN/ELSE statements or SELECT 
        statements. Remember to minimize the number of statements that use SAS 
        functions or arithmetic operators.</p>
      <p> Conditionally execute only necessary statements by placing statements 
        in groups that are associated with IF-THEN/ELSE statements or SELECT/WHEN 
        statements. Groups of statements execute only when a particular condition 
        is true. Review the criteria for <a href="m83_11.htm" onClick="suggestBack()">using 
        DO groups efficiently</a>.</p>
      <p></p>
      <p>Review the related comparative examples:</p>
      <ul>
        <li><a href="m83_3.htm" onClick="suggestBack()">Creating a Subset of Data</a></li>
        <li><a href="m83_7.htm" onClick="suggestBack()">Creating Variables Conditionally 
          Using Do Groups</a></li>
        <li><a href="m83_9.htm" onClick="suggestBack()">Creating Variables Conditionally 
          When Calling Functions</a></li>
        <li><a href="m83_12.htm" onClick="suggestBack()">Creating Data in DO Groups.</a></li>
      </ul>
      <hr size="1" noshade>
      <p><strong>Eliminating Unnecessary Passes Through the Data</strong><br>
        You should avoid reading or writing data more than necessary in order 
        to minimize I/O operations. 
      <p>There are a <a href="m83_14.htm" onClick="suggestBack()">variety of techniques</a> 
        that you can use. For example, use a single DATA step to create multiple 
        output data sets from one pass of the input data, rather than using multiple 
        DATA steps to process the input data each time that you create an output 
        data set. Create sorted subsets by subsetting data with the SORT procedure 
        rather than subsetting data in a DATA step and then sorting. Change variable 
        attributes by using PROC DATASETS rather than a DATA step.</p>
      <p>Review the related comparative examples:</p>
      <ul>
        <li><a href="m83_15.htm" onClick="suggestBack()">Creating Multiple Subsets 
          of a SAS Data Set</a></li>
        <li><a href="m83_17.htm" onClick="suggestBack()">Creating a Sorted Subset 
          of a SAS Data Set</a></li>
        <li><a href="m83_20.htm" onClick="suggestBack()">Changing the Variable 
          Attributes of a SAS Data Set.</a></li>
      </ul>
      <hr size="1" noshade>
      <p><strong>Reading and Writing Only Essential Data</strong><br>
        If you process fewer observations and variables, SAS performs fewer I/O 
        operations. To limit the number of observations that are processed, you 
        can use <a href="m83_22.htm" onClick="suggestBack()">the subsetting IF 
        statement and the WHERE statement</a>. Best programming practices can 
        be applied if you understand <a href="m83_24.htm" onClick="suggestBack()">other 
        differences between subsetting IF and WHERE statements</a>. You can also 
        improve performance by <a href="m83_27.htm" onClick="suggestBack()">applying 
        OBS= and FIRSTOBS=</a> processing with a WHERE statement. 
      <p>To select observations <a href="m83_28.htm" onClick="suggestBack()">when 
        reading data from external files</a>, position a subsetting IF statement 
        in a DATA step so that it reads only the variables that are needed to 
        select the subset&#8212;before reading all the data. This can reduce the 
        overhead required to process data.</p>
      <p>To <a href="m83_32.htm" onClick="suggestBack()">limit the number of variables</a> 
        that are processed, you can use</p>
      <ul>
        <li>the DROP and KEEP statements</li>
        <li>the DROP= and KEEP= data set options.</li>
      </ul>
      <p>In the SET statement, the DROP= or KEEP= data set option controls which 
        variables are read and subsequently processed. In the DATA statement, 
        the DROP= or KEEP= data set option controls which variables are written 
        to a data set after processing. Using the SET statement with these options 
        is the most efficient and best practice.</p>
      <p>Review the related comparative examples:</p>
      <ul>
        <li><a href="m83_23.htm" onClick="suggestBack()">Creating a Subset of 
          a SAS Data Set</a></li>
        <li><a href="m83_29.htm" onClick="suggestBack()">Creating a Subset of 
          Data by Reading Data from an External File</a></li>
        <li><a href="m83_33.htm" onClick="suggestBack()">Creating a Report That 
          Contains Average and Median Statistics</a></li>
        <li><a href="m83_35.htm" onClick="suggestBack()">Creating a SAS Data Set 
          That Contains Only Certain Variables.</a></li>
      </ul>
      <hr size="1" noshade>
      <p><strong>Storing SAS Data in SAS Data Sets</strong><br>
        When you use SAS to repeatedly analyze or manipulate any particular group 
        of data, <a href="m83_37.htm" onClick="suggestBack()">create a SAS data 
        set</a> instead of reading the raw data each time. 
      <p>Reading data from an external file versus reading from a SAS data set 
        greatly increases CPU usage.</p>
      <p>Review the related comparative example:</p>
      <ul>
        <li><a href="m83_38.htm" onClick="suggestBack()">Creating a SAS Data Set 
          or Reading From an External File.</a></li>
      </ul>
      <hr size="1" noshade>
      <p><strong>Avoiding Unnecessary Procedure Invocation</strong><br>
        Invoking procedures once rather than multiple times can be the most efficient 
        way to process data. Several procedures enable you to create multiple 
        reports by invoking the procedure only once. 
      <p>Using a single <a href="m83_40.htm" onClick="suggestBack()">DATASETS 
        procedure</a> instead of multiple DATASETS procedures to modify the descriptor 
        portion of a data set results in a noticeable savings in both CPU and 
        I/O operations. Also, you can take advantage of <a href="m83_41.htm" onClick="suggestBack()">RUN-group 
        processing</a> to submit groups of statements without ending the procedure. 
      </p>
      <p>Review the related comparative example:</p>
      <ul>
        <li><a href="m83_42.htm" onClick="suggestBack()">Modifying the Descriptor 
          Portion of SAS Data Sets.</a></li>
      </ul>
      <!-- InstanceEndEditable --></td>
  </tr>
</table>
<P> <br>
<script>writeNav_regular_bottom();</script>
</body>
<!-- InstanceEnd --></html>