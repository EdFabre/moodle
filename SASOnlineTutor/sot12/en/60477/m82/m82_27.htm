<html><!-- InstanceBegin template="/Templates/opt_summary.dwt" codeOutsideHTMLIsLocked="false" -->
<head>

<SCRIPT LANGUAGE="JavaScript" SRC="../tut.js"></SCRIPT>
<script language="JavaScript" src="../nav.js"></script>

<SCRIPT LANGUAGE="JavaScript">
 setPageTitle();
 setCookie();
 
// Drop down menu link- © Dynamic Drive (www.dynamicdrive.com)
// For full source code and 100's more DHTML scripts, visit http://www.dynamicdrive.com
// Credit MUST stay intact for use -->

</SCRIPT>

<!-- InstanceBeginEditable name="extrascript" -->
<SCRIPT LANGUAGE="JavaScript">
</SCRIPT>
<!-- InstanceEndEditable -->

<link rel="stylesheet" href="../tut.css">

<META http-equiv="Content-Type" content="text/html; charset=windows-1252">
</HEAD>

<body marginheight="0" marginwidth="0" topmargin="0" leftmargin="0" rightmargin="0" bgcolor="#FFFFF0">
<script>writeinformationObjectTopNav1();</script>
      
	  <font color="#003399" size="3" face="Arial, Helvetica, sans-serif"><strong>
      <script>document.write(summaryTitle)</script>
      </strong></font>
	  
	  
<script>writeinformationObjectTopNav2();</script>

<br>
<TABLE cellpadding=0 cellspacing=0 border=0 width="85%" align="center">
  <TR>
	<TD align="left">
	  <EM><script>document.write(summaryPageDirections);</script></EM></TD>
      </TR>
    </TABLE>
  <br>
<table width="85%" border="0" align="center" cellpadding="0" cellspacing="0">
  <tr valign="top"> 
    <td><!-- InstanceBeginEditable name="TextSummary" --><strong>Reducing Data 
      Storage Space for Character Variables</strong> <br>
      SAS stores character data as one character per byte. The default length 
      for a character variable is 8 bytes. You can use the <a href="m82_2.htm" onClick="suggestBack()">LENGTH 
      statement</a> to reduce the length of a character variable. You can also 
      use other coding techniques to reduce the space that is needed for storing 
      your character data.</p> 
      <hr size="1" noshade>
      <p><strong>Reducing Data Storage Space for Numeric Variables </strong> <br>
        SAS stores numeric data in <a href="m82_3.htm" onClick="suggestBack()">floating-point 
        representation</a>. The default length for a numeric variable is 8 bytes. 
        You can use a <a href="m82_4.htm" onClick="suggestBack()">LENGTH statement</a> 
        to reduce the length of a numeric variable. Reading reduced-length numeric 
        variables requires less I/O but more CPU resources than reading full-length 
        numeric variables. You should store only integer values in reduced-length 
        numeric variables, and you should <a href="m82_5.htm" onClick="suggestBack()">limit 
        the values</a> according to the length that you use. You can use <a href="m82_6.htm" onClick="suggestBack()">PROC 
        COMPARE</a> to see the precision loss, if any, in the values of reduced-length 
        numeric variables.</p>
      <p> Review the related comparative 
        example:
		<ul>
        <li> <a href="m82_8.htm" onClick="suggestBack()">Creating a SAS Data Set 
          That Contains Reduced-Length Numeric Variables</a> 
      </ul></p>
	  <hr size="1" noshade>
      <p><strong>Compressing Data Files  </strong> <br>
        By default, a SAS data file is <a href="m82_10.htm" onClick="suggestBack()">uncompressed</a>. 
        You can compress your data files in order to conserve disk space, although 
        some files are <a href="m82_11.htm#CompressNo" onClick="suggestBack()">not 
        good candidates</a> for compression. The file structure of a <a href="m82_11.htm" onClick="suggestBack()">compressed 
        data file</a> is different from the structure of an uncompressed file. 
        You use the <a href="m82_12.htm" onClick="suggestBack()">COMPRESS=</a> 
        data set option or system option to compress a data file. You use the 
        <a href="m82_14.htm" onClick="suggestBack()">POINTOBS=</a> data set option 
        to enable SAS to access observations in compressed files directly rather 
        than sequentially. You use the <a href="m82_15.htm" onClick="suggestBack()">REUSE=</a> 
        data set option or system option to specify that SAS should reuse space 
        in a compressed file when observations are deleted or updated.</p>
      <p> Review the related comparative 
        example:
		<ul><li><a href="m82_17.htm" onClick="suggestBack()">Creating and Reading Compressed Data Files</a>
		</ul></p>
<hr size="1" noshade>
      <p><strong>Using SAS DATA Step Views to Conserve Data Storage Space </strong> 
        <br>
        You can leave your data in its original storage location and use <a href="m82_19.htm" onClick="suggestBack()">SAS 
        data views</a> to access the data in order to reduce the amount of space 
        needed for storing data on disk. A <a href="m82_20.htm" onClick="suggestBack()">DATA 
        step view</a> is a specific type of data view that is created in a DATA 
        step with the <a href="m82_20.htm#compress" onClick="suggestBack()">VIEW= 
        option</a>. You use the <a href="m82_20.htm#describe" onClick="suggestBack()">DESCRIBE 
        statement</a> to write the source code for a data view to the SAS log. 
        Some of the advantages of using DATA step views rather than data files 
        are that they always access the most recent data in dynamic files and 
        that they require less disk space. However, there can be an <a href="m82_23.htm" onClick="suggestBack()">effect 
        on performance</a> when you use a DATA step view. </p>
      <p> Review the related comparative 
        example:
		<ul><li><a href="m82_25.htm" onClick="suggestBack()">Creating and Reading a SAS Data View</a>
		</ul></p>
	 
      <!-- InstanceEndEditable --></td>
  </tr>
</table>
<P> <br>
<script>writeNav_regular_bottom();</script>
</body>
<!-- InstanceEnd --></html>