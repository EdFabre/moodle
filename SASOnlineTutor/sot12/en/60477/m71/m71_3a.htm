<html><!-- #BeginTemplate "/Templates/popup.dwt" --><!-- DW6 -->
<head>
<SCRIPT LANGUAGE="JavaScript" SRC="../tut.js"></SCRIPT>
<script language="JavaScript" src="../nav.js"></script>
<link rel="stylesheet" href="../tut.css">

<!-- #BeginEditable "title" --><TITLE>Creating a Cartesian Product</TITLE><!-- #EndEditable -->


<META http-equiv="Content-Type" content="text/html; charset=windows-1252">
</HEAD>
<body bgcolor="#FFFFF0" topmargin="0" leftmargin="0" onLoad="self.focus()">
<table width="85%" border="0" cellpadding="0" cellspacing="0" align="center">
  <tr valign="top"> 
    <td><br>
      <strong><font size="3" color="#003399"><!-- #BeginEditable "popup_title" -->Creating 
      a Cartesian Product<!-- #EndEditable --></font></strong> </td>
</tr>
</table><p> 
<!-- #BeginEditable "contents" -->
<TABLE CELLPADDING="2" ALIGN="Center" width="85%">
  <TR> 
    <TD COLSPAN=2> <ol>
        <li>This animation shows how PROC SQL joins two tables, <strong>One</strong> 
          and <strong>Two</strong>, to create a Cartesian product. The following 
          PROC SQL query returns a Cartesian product because it specifies multiple 
          tables in the FROM clause but does not include a WHERE clause to specify 
          any subsetting criteria:<font color="#003399"> 
          <pre>     proc sql;
        select *
           from one,two;</pre>
          </font> The tables <strong>One</strong> and <strong>Two</strong> are 
          shown on page 3, above the animation. <br>
          <br>
        <li>In a Cartesian product, each row from the first table is combined 
          with each row from the second table. PROC SQL starts by taking the <strong>first</strong> 
          row from <strong>One</strong> and combining it with the <strong>first</strong> 
          row from <strong>Two</strong>. This combined row is displayed in PROC 
          SQL output.<br>
          <br>
        </li>
        <li>PROC SQL then combines the first row from <strong>One</strong> with 
          the <strong>second</strong> row from <strong>Two</strong> ... <br>
          <br>
        </li>
        <li>... and the <strong>third</strong> row from <strong>Two</strong>. 
          PROC SQL has now combined the first row from <strong>One</strong> with 
          all three rows from <strong>Two</strong>.<br>
          <br>
        </li>
        <li> PROC SQL moves on to the <strong>second</strong> row from <strong>One</strong> 
          and combines it with the <strong>first</strong> row from <strong>Two</strong>, 
          ...<br>
          <br>
        </li>
        <li>... the <strong>second</strong> row from <strong>Two</strong>, ...<br>
          <br>
        </li>
        <li> ... and the <strong>third</strong> row from <strong>Two</strong>.<br>
          <br>
        </li>
        <li>Finally, PROC SQL combines the <strong>third</strong> row from <strong>One</strong> 
          with the <strong>first</strong> row from <strong>Two</strong>, ...<br>
          <br>
        </li>
        <li>... the <strong>second</strong> row from <strong>Two</strong>, ...<br>
          <br>
        </li>
        <li>... and the <strong>third</strong> row from <strong>Two</strong>.<br>
          <br>
        </li>
        <li>The output now includes <strong>all</strong> combinations of rows 
          from <strong>One</strong> with rows from <strong>Two</strong>, for a 
          total of <strong>9</strong> rows <nobr>(3 x 3)</nobr>. This Cartesian 
          product is complete.</li>
      </ol></TD>
  </TR>
</TABLE>
<!-- #EndEditable -->
<center><table width="85%" border="0" cellpadding="0" cellspacing="0" align="center">   
  <tr valign="top"> 
    <td> 
      <p><br><center>
        <script>writecloseButton();</script></center>
</td></tr></table>
    
<script>writeNav_popup_bottom();</script></center>
    </body>
<!-- #EndTemplate --></html>