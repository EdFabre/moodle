<html><!-- InstanceBegin template="/Templates/informationObject.dwt" codeOutsideHTMLIsLocked="false" -->
<head>
<SCRIPT LANGUAGE="JavaScript" SRC="../tut.js"></SCRIPT>
<script language="JavaScript" src="../nav.js"></script>
<SCRIPT LANGUAGE="JavaScript">
 setPageTitle();
 setCookie();
  
// Drop down menu link- © Dynamic Drive (www.dynamicdrive.com)
// For full source code and 100's more DHTML scripts, visit http://www.dynamicdrive.com
// Credit MUST stay intact for use -->

</SCRIPT>

<!-- InstanceBeginEditable name="extrascript" -->
<SCRIPT LANGUAGE="JavaScript">
</SCRIPT>
<!-- InstanceEndEditable -->

<link rel="stylesheet" href="../tut.css">


<META http-equiv="Content-Type" content="text/html; charset=windows-1252">
</HEAD>

<body marginheight="0" marginwidth="0" topmargin="0" leftmargin="0" rightmargin="0" bgcolor="#FFFFF0">
<script>writeinformationObjectTopNav1();</script>
	  
	  <font color="#003399" size="3" face="Arial, Helvetica, sans-serif"><strong><!-- InstanceBeginEditable name="TopicTitle" -->Using 
      the EXCEPT Set Operator<!-- InstanceEndEditable --></strong></font> <!-- InstanceBeginEditable name="continued" --><font color="#003399" size="3" face="Arial, Helvetica, sans-serif">(continued)</font><!-- InstanceEndEditable -->
	  
<script>writeinformationObjectTopNav2();</script>
<br>
<center>
  <!-- InstanceBeginEditable name="content" --> 
  <table width="85%" border="0" cellpadding="0" cellspacing="0">
    <tr valign="top"> 
      <td> <h2>Example: EXCEPT Operator</h2>
        <p> Let&#8217;s see how the EXCEPT operator is used to solve a realistic 
          business problem. Suppose you want to display the names of all <strong>new</strong> 
          employees of a company. There is no table that contains information 
          for only the new employees, so you will have to use data from the following 
          two tables.<br>
        </p></td>
    </tr>
  </table>
  <p> <br>
  <table width="85%" border="1" cellpadding="2" cellspacing="0" bgcolor="#FFFFFF" title="Data Needed for Query">
    <tr align="center" valign="top" bgcolor="#F7F7DE"> 
      <th width="65%" bgcolor="#F7F7DE"><font size="-1">Table</font></th>
      <th width="35%"><font size="-1">Relevant Columns</font></th>
    </tr>
    <tr valign="top"> 
      <td><strong><a href="JavaScript: openOther('../linklib/stafchng.htm')">Sasuser.Staffchanges</a></strong> 
        lists information for all new employees and existing employees who have 
        had a change in salary or job code</td>
      <td><code>FirstName, LastName</code></td>
    </tr>
    <tr valign="top"> 
      <td width="390"><strong><a href="JavaScript: openOther2('../linklib/stafmstr.htm')">Sasuser.Staffmaster</a></strong> 
        lists information for all existing employees </td>
      <td width="354"><code>FirstName, LastName</code></td>
    </tr>
  </table>
  <p> <br>
  <table width="85%" border="0" align="center" cellpadding="0" cellspacing="0">
    <tr> 
      <td>The relationship between these two tables is shown in the diagram below:</td>
    </tr>
  </table>
  <p> <br>
  <table border="0" align="center">
    <tr> 
      <td valign="top"><strong>Sasuser.Staffchanges</strong></td>
      <td align="center"> <p><img src="images/m72_2g1.gif" alt="Diagram of 2 vertical intersecting circles with non-overlapping portion of top circle highlighted" width="61" height="92"></p></td>
      <td valign="bottom"><strong>Sasuser.Staffmaster</strong></td>
    </tr>
  </table>
  <p> <br>
  <table width="85%" border="0" align="center" cellpadding="0" cellspacing="0">
    <tr> 
      <td>The intersection of these two tables includes information for all existing 
        employees who have had changes in job code or salary. The shaded portion, 
        the portion of <strong>Sasuser.Staffchanges</strong> that does <strong>not</strong> 
        overlap with <strong>Sasuser.Staffmaster</strong>, includes information 
        for the people that you want: new employees.</td>
    </tr>
  </table>
  <br>
  <table cellpadding="0" cellspacing="0" border="0" width="85%">
    <tr> 
      <td><p>To separate the new employees from the existing employees in <strong>Sasuser.Staffchanges</strong>, 
          you create a set operation that displays all rows from the first table 
          (<strong>Sasuser.Staffchanges</strong>) that do <strong>not</strong> 
          exist in the second table (<strong>Sasuser.Staffmaster</strong>). The 
          following PROC SQL step solves the problem:</p></td>
    </tr>
  </table>
  <br>
  <table width="85%" border="0" align="center" cellpadding="0" cellspacing="0">
    <tr> 
      <td><pre><font color="#003399">     proc sql;
      select firstname, lastname
        from sasuser.staffchanges
      <strong>except all</strong>
      select firstname, lastname
        from sasuser.staffmaster;</font></pre>
        </td>
    </tr>
  </table>
  <table width="85%" border="0" align="center" cellpadding="0" cellspacing="0">
    <tr> 
      <td><p>This PROC SQL set operation includes the operator <strong>EXCEPT</strong> 
          and the keyword <strong>ALL</strong>. Although you do not want the output 
          to contain duplicate rows, you already know that there are no duplicates 
          in these two tables. Therefore, ALL is specified to prevent PROC SQL 
          from making an extra pass through the data, which speeds up the processing 
          of this query. </p>
        <p>PROC SQL compares only the columns that are specified in the SELECT 
          clauses, and these columns are compared in the order in which they are 
          specified. The output displays the first and last names of the two new 
          employees.</p></td>
    </tr>
  </table>
  <p>
  <br>
  <TABLE border=1 align="center" cellpadding=2  cellspacing=1 bordercolor="#000000" bgcolor="#FFFFF0" frame=BOX rules=GROUPS title="PROC SQL Output">
    <thead>
      <TR> 
        <TD ALIGN=LEFT VALIGN=BOTTOM bgcolor="#CCCCCC"><font  face="Arial, Helvetica, Helv" size="3" color="#003399"><b>FirstName</b></font></TD>
        <TD ALIGN=LEFT VALIGN=BOTTOM bgcolor="#CCCCCC"><font  face="Arial, Helvetica, Helv" size="3" color="#003399"><b>LastName</b></font></TD>
      </TR>
    </thead>
    <tbody>
      <TR> 
        <TD ALIGN=LEFT bgcolor="#EFEFEF"><font  face="Arial, Helvetica, Helv" size="2">AMY</font></TD>
        <TD ALIGN=LEFT bgcolor="#EFEFEF"><font  face="Arial, Helvetica, Helv" size="2">BRIDESTON</font></TD>
      </TR>
      <TR> 
        <TD ALIGN=LEFT bgcolor="#EFEFEF"><font  face="Arial, Helvetica, Helv" size="2">JIM</font></TD>
        <TD ALIGN=LEFT bgcolor="#EFEFEF"><font  face="Arial, Helvetica, Helv" size="2">POWELL</font></TD>
      </TR>
    </tbody>
  </TABLE>
  <p>
  <br>
  <table width="85%" border="0" cellpadding="2" cellspacing="0">
    <tr> 
      <td valign="top" width="24"><img src="../navimages/note.gif" width="20" height="20" alt="Note"></td>
      <td valign="top">In a set operation that uses the EXCEPT operator, the order 
        in which the tables are listed in the SELECT statement makes a difference. 
        If the tables in this example were listed in the opposite order, the output 
        would display all <strong>existing</strong> employees who have had <strong>no 
        changes</strong> in salary or job code.</td>
    </tr>
  </table>
  <p>
  <br>
  <!-- InstanceEndEditable --> 
</center>
<script>writeNav_regular_bottom();</script>
</body>
<!-- InstanceEnd --></html>
