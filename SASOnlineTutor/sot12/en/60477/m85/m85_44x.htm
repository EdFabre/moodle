<HTML><!-- InstanceBegin template="/Templates/quizAnswers5.dwt" codeOutsideHTMLIsLocked="false" -->
<HEAD>
<SCRIPT LANGUAGE="JavaScript" SRC="../tut.js"></SCRIPT>
<script language="JavaScript" src="../nav.js"></script>

<SCRIPT LANGUAGE="JavaScript">
this.window.focus();

ans = new Array(10);
ans[0]= opener.userAns[0];
ans[1]= opener.userAns[1];
ans[2]= opener.userAns[2];
ans[3]= opener.userAns[3];
ans[4]= opener.userAns[4];
</SCRIPT>

<!-- InstanceBeginEditable name="correctanswers" -->
<SCRIPT LANGUAGE="JavaScript">
correctAns = new Array(5);
correctAns[0]= 'd';
correctAns[1]= 'b';
correctAns[2]= 'a';
correctAns[3]= 'c';
correctAns[4]= 'b';
</SCRIPT>
<!-- InstanceEndEditable -->

<SCRIPT LANGUAGE="JavaScript">
getScore();
document.write(quizResultsTitle);
</SCRIPT>

</TITLE>

<link rel="stylesheet" href="../tut.css">


<META http-equiv="Content-Type" content="text/html; charset=windows-1252">
</HEAD>
<body marginheight="0" marginwidth="0" topmargin="0" leftmargin="0" rightmargin="0" bgcolor="#FFFFF0" onLoad="markLesson()">
<P>
<CENTER>
  <TABLE CELLPADDING="2" width="95%" ALIGN="Center">
    <TR>
      <TD><A NAME="topofpage"><FONT color="#003399"><BIG><STRONG><BIG><font color="#003399"><script>document.write(quizScoreTitle)</script></font>&nbsp;
        <SCRIPT>document.write(pctscore)</SCRIPT>
        </BIG></STRONG></BIG></FONT></A></TD>
      <TD>
        <script>showStar()</script>
      </TD>
    </TR>
    <TR VALIGN="Top">
      <TD COLSPAN=2><BR>
	<EM><script>document.write(quizResultsDirections);</script></TD>
    </TR>
  </TABLE>
</CENTER>
<P>
<CENTER>
  <TABLE BORDER ALIGN="Center" BGCOLOR="#FFFFFF">
    <TR bgcolor="#F7F7DE"> 
      <TD>&nbsp;<FONT face="Arial, Helvetica, Sans Serif"><STRONG><script>document.write(quizQuestionNumber);</script> 
        </STRONG></FONT></TD>
      <TD> <P ALIGN=Center> <STRONG><A HREF="#1">1</A></STRONG></TD>
      <TD> <P ALIGN=Center> <STRONG><A HREF="#2">2</A></STRONG></TD>
      <TD> <P ALIGN=Center> <STRONG><A HREF="#3">3</A></STRONG></TD>
      <TD> <P ALIGN=Center> <STRONG><A HREF="#4">4</A></STRONG></TD>
      <TD> <P ALIGN=Center> <STRONG><A HREF="#5">5</A></STRONG></TD>
    </TR>
    <TR> 
      <TD>&nbsp;<STRONG><FONT color="TEAL" face="Arial, Helvetica, Sans Serif"><script>document.write(quizCorrectIncorrect);</script></FONT></STRONG></TD>
      <TD><P ALIGN=Center> <A HREF="#1">
          <SCRIPT>markAns(0)</SCRIPT>
          </A></TD>
      <TD><A HREF="#2">
        <SCRIPT>markAns(1)</SCRIPT>
        </A></TD>
      <TD><A HREF="#3">
        <SCRIPT>markAns(2)</SCRIPT>
        </A></TD>
      <TD><A HREF="#4">
        <SCRIPT>markAns(3)</SCRIPT>
        </A></TD>
      <TD><A HREF="#5">
        <SCRIPT>markAns(4)</SCRIPT>
        </A></TD>
    </TR>
  </TABLE>
</CENTER>
<P>
<P>
<BR>
<CENTER>
  <TABLE cellpadding=0 cellspacing=0 border=0 width="95%" ALIGN="Center">
    <TR> 
      <TD></TD>
      <TD></TD>
      <TD> <HR> <BR> </TD>
    </TR>
    <TR VALIGN="Top"> 
      <TD><A NAME="1"> 
        <SCRIPT>markAns(0)</SCRIPT>
        </A></TD>
      <TD><P ALIGN=Left> <STRONG>1.&nbsp;&nbsp;</STRONG><BR>
      </TD>
      <TD><!-- InstanceBeginEditable name="q1text" -->Why can using an index reduce 
        the number of I/O operations that are required for accessing a small subset?<!-- InstanceEndEditable -->
        <p> 
        <table width="95%" border="0">
          <tr valign="top"> 
            <td width="18"> <em>a.</em></td>
            <td width="400"><!-- InstanceBeginEditable name="q1a" --> Using an 
              index requires larger input buffers, which can hold more pages.<!-- InstanceEndEditable --></td>
          </tr>
          <tr valign="top"> 
            <td width="18"> <em>b.</em></td>
            <td width="400"><!-- InstanceBeginEditable name="q1b" --> The index 
              does not have to be loaded into an input buffer.<!-- InstanceEndEditable --></td>
          </tr>
          <tr valign="top"> 
            <td width="18"> <em>c.</em></td>
            <td width="400"><!-- InstanceBeginEditable name="q1c" --> The number 
              of observations that SAS has to load into the program data vector 
              (PDV) is decreased.<!-- InstanceEndEditable --></td>
          </tr>
          <tr valign="top"> 
            <td width="18"> <em>d.</em></td>
            <td width="400"><!-- InstanceBeginEditable name="q1d" --> The number 
              of pages that SAS has to load into input buffers is decreased.<!-- InstanceEndEditable --></td>
          </tr>
        </table>
        <P> <A NAME="q1"><STRONG><script>document.write(quizCorrectAnswerLabel);</script></STRONG></A><STRONG><FONT
	    color="#003399"> 
          <SCRIPT>document.write(correctAns[0])</SCRIPT>
          </FONT></STRONG> </TD>
    </TR>
    <TR> 
      <TD></TD>
      <TD></TD>
      <TD><STRONG><script>document.write(quizYourAnswerLabel);</script><FONT color="#003399">
        <SCRIPT>document.write(ans[0])</SCRIPT>
        </FONT></STRONG></TD>
    </TR>
    <TR VALIGN="Top"> 
      <TD></TD>
      <TD></TD>
      <TD><BR> <!-- InstanceBeginEditable name="q1feed" -->When <A HREF="JavaScript: showPage('m85_4.htm')">using 
        an index</a> to select a subset, SAS loads only the pages that contain 
        a qualified observation into input buffers. When <A HREF="JavaScript: showPage('m85_3.htm')">accessing 
        observations sequentially</a>, SAS must load all observations into input 
        buffers. Loading more pages requires more I/O operations.<!-- InstanceEndEditable -->&nbsp;<A HREF="#topofpage"><script>writetopofpageButton();</script></A><BR> <BR> <HR> 
        <BR> </TD>
    </TR>
    <TR VALIGN="Top"> 
      <TD><A NAME="2">
        <SCRIPT>markAns(1)</SCRIPT>
        </A></TD>
      <TD><P ALIGN=Left> <STRONG>2.&nbsp;&nbsp;</STRONG><BR>
      </TD>
      <TD><!-- InstanceBeginEditable name="q2text" -->You want to select a subset 
        of observations in the data set <strong>Company.Products</strong>, and 
        you have defined a simple index on the variable <code>Rating. </code>SAS 
        <strong>cannot</strong> use the index to process which of the following 
        WHERE statements?<!-- InstanceEndEditable --> 
        <P> 
        <TABLE width="95%" border="0">
          <TR valign="top"> 
            <td width="18"> <EM>a.</EM></TD>
            <td width="400"><!-- InstanceBeginEditable name="q2a" --> 
              <pre><font color="#003399">where rating is missing;</font></pre>
              <!-- InstanceEndEditable --></TD>
          </TR>
          <TR valign="top"> 
            <td width="18"> <EM>b.</EM></TD>
            <td width="400"><!-- InstanceBeginEditable name="q2b" -->
              <pre><font color="#003399">where rating=int(rating);</font></pre>
              <!-- InstanceEndEditable --></TD>
          </TR>
          <TR valign="top"> 
            <td width="18"> <EM>c.</EM></TD>
            <td width="400"><!-- InstanceBeginEditable name="q2c" -->
              <pre><font color="#003399">where rating between 3.5 and 7.5;</font></pre>
              <!-- InstanceEndEditable --></TD>
          </TR>
          <TR valign="top"> 
            <td width="18"> <EM>d.</EM></TD>
            <td width="400"><!-- InstanceBeginEditable name="q2d" -->
              <pre><font color="#003399">where rating=5.5;</font></pre>
              <!-- InstanceEndEditable --></TD>
          </TR>
        </TABLE>
        <P> <A NAME="q2"><STRONG><script>document.write(quizCorrectAnswerLabel);</script></STRONG></A><STRONG><FONT
	    color="#003399">
          <SCRIPT>document.write(correctAns[1])</SCRIPT>
          </FONT></STRONG></TD>
    </TR>
    <TR> 
      <TD></TD>
      <TD></TD>
      <TD><STRONG><script>document.write(quizYourAnswerLabel);</script><FONT color="#003399">
        <SCRIPT>document.write(ans[1])</SCRIPT>
        </FONT></STRONG></TD>
    </TR>
    <TR VALIGN="Top"> 
      <TD></TD>
      <TD></TD>
      <TD><BR> <!-- InstanceBeginEditable name="q2feed" --> 
       SAS considers using an index to process a WHERE condition that contains 
          one of a specific group of <A HREF="JavaScript: showPage('m85_12.htm')">operators 
          and functions</a>. However, SAS will <strong>not</strong> consider using 
          an index for a WHERE condition that contains <A HREF="JavaScript: showPage('m85_13.htm')">other elements</a>, such as 
          a function other than TRIM or SUBSTR.
        <!-- InstanceEndEditable -->&nbsp;<A HREF="#topofpage"><script>writetopofpageButton();</script></A> <BR> <BR> <HR> <BR> </TD>
    </TR>
    <TR VALIGN="Top"> 
      <TD><A NAME="3">
        <SCRIPT>markAns(2)</SCRIPT>
        </A></TD>
      <TD><P ALIGN=Left> <STRONG>3.&nbsp;&nbsp;</STRONG><BR>
      </TD>
      <TD><!-- InstanceBeginEditable name="q3text" -->In which of the following 
        situations is sequential access likely to be more efficient than direct 
        access for WHERE processing?<!-- InstanceEndEditable --> 
        <P> 
        <table width="95%" border="0">
          <tr valign="top"> 
            <td width="18"> <em>a.</em></td>
            <td width="400"><!-- InstanceBeginEditable name="q3a" --> The subset 
              contains over 75% of the observations in the data set.<!-- InstanceEndEditable --></td>
          </tr>
          <tr valign="top"> 
            <td width="18"> <em>b.</em></td>
            <td width="400"><!-- InstanceBeginEditable name="q3b" -->The WHERE 
              expression specifies both key variables in a single composite index. 
              <!-- InstanceEndEditable --></td>
          </tr>
          <tr valign="top"> 
            <td width="18"> <em>c.</em></td>
            <td width="400"><!-- InstanceBeginEditable name="q3c" -->The data 
              is sorted on the key variable.<!-- InstanceEndEditable --></td>
          </tr>
          <tr valign="top"> 
            <td width="18"> <em>d.</em></td>
            <td width="400"><!-- InstanceBeginEditable name="q3d" -->The data 
              set is very large.<!-- InstanceEndEditable --></td>
          </tr>
        </table>
        <P><A NAME="q3"><STRONG><script>document.write(quizCorrectAnswerLabel);</script></STRONG></A><STRONG><FONT
	    color="#003399"> 
          <SCRIPT>document.write(correctAns[2])</SCRIPT>
          </FONT></STRONG> </TD>
    </TR>
    <TR> 
      <TD></TD>
      <TD></TD>
      <TD><STRONG><script>document.write(quizYourAnswerLabel);</script><FONT color="#003399">
        <SCRIPT>document.write(ans[2])</SCRIPT>
        </FONT></STRONG></TD>
    </TR>
    <TR VALIGN="Top"> 
      <TD></TD>
      <TD></TD>
      <TD><BR> <!-- InstanceBeginEditable name="q3feed" -->The <A HREF="JavaScript: showPage('m85_17.htm')">size 
        of the subset</a> relative to the size of the data set is an important 
        factor in determining which access method is most efficient. If a subset 
        is large (more than 33% of the data set), it is likely to be more efficient 
        to use sequential access than direct access. Direct access is usually 
        more efficient when you are selecting a small subset (less than 33% of 
        the data set), especially if the data set is large (has a high <A HREF="JavaScript: showPage('m85_21.htm#pagecount')">page 
        count</a>). However, if the data set is very small (less than three pages), 
        using an index is not efficient. The number of key variables specified 
        in a WHERE expression does not determine which access method is most efficient. 
        If the two key variables that are specified are the first two variables 
        in the same index, the WHERE expression is a candidate for <A HREF="JavaScript: showPage('m85_10.htm')">compound 
        optimization</a>. <A HREF="JavaScript: showPage('m85_21.htm#sorting')">Sorting 
        the data</a> also does not determine which access method is most efficient. 
        However, sorting the data before subsetting improves the efficiency of 
        WHERE processing regardless of the access method.<!-- InstanceEndEditable -->&nbsp;<A HREF="#topofpage"><script>writetopofpageButton();</script></A> <BR> <BR> <HR> <BR> </TD>
    </TR>
    <TR VALIGN="Top"> 
      <TD><A NAME="4">
        <SCRIPT>markAns(3)</SCRIPT>
        </A></TD>
      <TD><P ALIGN=Left> <STRONG>4.&nbsp;&nbsp;</STRONG><BR>
      </TD>
      <TD><!-- InstanceBeginEditable name="q4text" -->You want to summarize data 
        for one class variable, and you are trying to decide whether to use PROC 
        MEANS (or PROC SUMMARY), PROC REPORT, PROC TABULATE, PROC SQL, or the 
        DATA step with PROC SORT. Which of the following statements about the 
        efficiency of these summarization tools is <strong>not</strong> true?<!-- InstanceEndEditable --> 
        <P> 
        <TABLE width="95%" border="0">
          <TR valign="top"> 
            <td width="18"> <EM>a.</EM></TD>
            <td width="400"><!-- InstanceBeginEditable name="q4a" --> PROC MEANS 
              (or PROC SUMMARY), PROC REPORT, and PROC TABULATE have similar resource 
              usage. <!-- InstanceEndEditable --></TD>
          </TR>
          <TR valign="top"> 
            <td width="18"> <EM>b.</EM></TD>
            <td width="400"><!-- InstanceBeginEditable name="q4b" -->The efficiency 
              of all these tools is affected by the shape of the data.<!-- InstanceEndEditable --></TD>
          </TR>
          <TR valign="top"> 
            <td width="18"> <EM>c.</EM></TD>
            <td width="400"><!-- InstanceBeginEditable name="q4c" --> The SQL 
              procedure is always the least efficient because it is a general-purpose 
              tool.<!-- InstanceEndEditable --></TD>
          </TR>
          <TR valign="top"> 
            <td width="18"> <EM>d.</EM></TD>
            <td width="400"><!-- InstanceBeginEditable name="q4d" --> PROC SQL 
              and the DATA step with PROC SORT have similar resource usage.<!-- InstanceEndEditable --></TD>
          </TR>
        </TABLE>
        <P> <A NAME="q4"><STRONG><script>document.write(quizCorrectAnswerLabel);</script></STRONG></A><STRONG><FONT
	    color="#003399">
          <SCRIPT>document.write(correctAns[3])</SCRIPT>
          </FONT></STRONG></TD>
    </TR>
    <TR> 
      <TD></TD>
      <TD></TD>
      <TD><STRONG><script>document.write(quizYourAnswerLabel);</script><FONT color="#003399">
        <SCRIPT>document.write(ans[3])</SCRIPT>
        </FONT></STRONG></TD>
    </TR>
    <TR VALIGN="Top"> 
      <TD></TD>
      <TD></TD>
      <TD><BR> <!-- InstanceBeginEditable name="q4feed" --> 
        <p>When you are summarizing data for one or more class variables, the 
          tools in each of the following groups are similar in resource usage: 
        </p>
        <ul>
          <li>PROC MEANS (or PROC SUMMARY), PROC REPORT, and PROC TABULATE </li>
          <li> PROC SQL and the DATA step with PROC SORT. </li>
        </ul>
  However, the relative <A HREF="JavaScript: showPage('m85_31.htm#compare')">efficiency</a> of the two groups of tools varies 
          according to the shape 
          of the data.
        <!-- InstanceEndEditable -->&nbsp;<A HREF="#topofpage"><script>writetopofpageButton();</script></A> <BR> <BR> <HR> <BR> </TD>
    </TR>
    <TR VALIGN="Top"> 
      <TD><A NAME="5">
        <SCRIPT>markAns(4)</SCRIPT>
        </A></TD>
      <TD><P ALIGN=Left> <STRONG>5.&nbsp;&nbsp;</STRONG><BR>
      </TD>
      <TD><!-- InstanceBeginEditable name="q5text" -->Which of the following techniques 
        is most efficient for summarizing data for specific combinations of class 
        variables?<!-- InstanceEndEditable --> 
        <P> 
        <table width="95%" border="0">
          <tr valign="top"> 
            <td width="18"> <em>a.</em></td>
            <td width="400"><!-- InstanceBeginEditable name="q5a" --> the NWAY 
              option in multiple PROC MEANS steps<!-- InstanceEndEditable --></td>
          </tr>
          <tr valign="top"> 
            <td width="18"> <em>b.</em></td>
            <td width="400"><!-- InstanceBeginEditable name="q5b" -->the TYPES 
              statement in a PROC MEANS step<!-- InstanceEndEditable --></td>
          </tr>
          <tr valign="top"> 
            <td width="18"> <em>c.</em></td>
            <td width="400"><!-- InstanceBeginEditable name="q5c" -->the WHERE= 
              option in a PROC MEANS step<!-- InstanceEndEditable --></td>
          </tr>
          <tr valign="top"> 
            <td width="18"> <em>d.</em></td>
            <td width="400"><!-- InstanceBeginEditable name="q5d" -->a basic PROC 
              MEANS step.<!-- InstanceEndEditable --></td>
          </tr>
        </table>
        <P><A NAME="q5"><STRONG><script>document.write(quizCorrectAnswerLabel);</script></STRONG></A><STRONG><FONT
	    color="#003399"> 
          <SCRIPT>document.write(correctAns[4])</SCRIPT>
          </FONT></STRONG> </TD>
    </TR>
    <TR> 
      <TD></TD>
      <TD></TD>
      <TD><STRONG><script>document.write(quizYourAnswerLabel);</script><FONT color="#003399">
        <SCRIPT>document.write(ans[4])</SCRIPT>
        </FONT></STRONG></TD>
    </TR>
    <TR VALIGN="Top"> 
      <TD></TD>
      <TD></TD>
      <TD><BR> <!-- InstanceBeginEditable name="q5feed" -->The <A HREF="JavaScript: showPage('m85_37.htm')">TYPES 
        statement</a> in a PROC MEANS step is the most efficient <A HREF="JavaScript: showPage('m85_34.htm')">technique 
        for summarizing data</a> for one or more specific combinations of class 
        variables. A program that contains the <A HREF="JavaScript: showPage('m85_38.htm')">NWAY 
        option</a> in multiple PROC MEANS steps is usually least efficient because 
        SAS must read the entire data set in each step. A PROC MEANS step that 
        contains the <A HREF="JavaScript: showPage('m85_39.htm')">WHERE= option 
        in the OUTPUT statement</a> is also less efficient than the TYPES statement 
        in PROC MEANS because SAS must calculate all possible combinations of 
        class variables, and subsetting does not occur until the results are written 
        to output. A <A HREF="JavaScript: showPage('m85_35.htm')">basic PROC MEANS 
        step</a> summarizes data for all possible combinations of class variables 
        instead of for specific combinations.
        <!-- InstanceEndEditable -->&nbsp;<A HREF="#topofpage"><script>writetopofpageButton();</script></A><BR><HR><BR> </TD>
    </TR>
  </TABLE>
</CENTER>
<script>writereturnToQuizButton();</script>
   
<script>writeNav_popup_bottom();</script>
</body>
<!-- InstanceEnd --></html>