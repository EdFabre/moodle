<html><!-- InstanceBegin template="/Templates/eg_informationObject.dwt" codeOutsideHTMLIsLocked="false" -->
<head>
<SCRIPT LANGUAGE="JavaScript" SRC="../tut.js"></SCRIPT>
<script language="JavaScript1.2" src="../nav.js"></script>
<SCRIPT LANGUAGE="JavaScript">
 setPageTitle();
 setCookie();
 checkVersion();
 
// Drop down menu link- © Dynamic Drive (www.dynamicdrive.com)
// For full source code and 100's more DHTML scripts, visit http://www.dynamicdrive.com
// Credit MUST stay intact for use -->

</SCRIPT>

<!-- InstanceBeginEditable name="extrascript" -->
<SCRIPT LANGUAGE="JavaScript">
</SCRIPT>
<!-- InstanceEndEditable -->

<link rel="stylesheet" href="../tut.css">


<META http-equiv="Content-Type" content="text/html; charset=windows-1252">
</HEAD>

<body marginheight="0" marginwidth="0" topmargin="0" leftmargin="0" rightmargin="0" bgcolor="#FFFFF0" onLoad="writeEG_div()">
<script>writeeg_informationObjectTopNav1();</script>
	  
	  <font color="#003399" size="3" face="Arial, Helvetica, sans-serif"><strong><!-- InstanceBeginEditable name="TopicTitle" -->Running 
      Tasks against Query Output<!-- InstanceEndEditable --></strong></font> 
      <!-- InstanceBeginEditable name="continued" --><!-- InstanceEndEditable -->
	  
<script>writeeg_informationObjectTopNav2();</script>

<br>
<center>
  <!-- InstanceBeginEditable name="content" --> 
  <div id="le2_eg2" class="eg_div">
  <table width="85%" border="0" cellpadding="0" cellspacing="0">
      <tr valign="top"> 
        <td> <p>Earlier in this lesson, you created HTML reports directly as query 
            output. Often a report is enough, but sometimes you need to perform 
            other analyses on your query results before creating a report. This 
            is the case with your profit query, where you created a table as query 
            output. Now you need to analyze this data and create a report.</p>
          <p>As you saw earlier, if you specify a <strong>data table</strong> 
            or <strong>data view</strong> as your result format, you can run SAS 
            Enterprise Guide tasks against your query output.</p>
          <p><strong><br>
            Example: Creating a Summary Tables Report from Query Output</strong></p>
          <p>You've already created a query that shows profit for products. But 
            suppose you want to create a more complex report that is also attractively 
            formatted. In this report, for each product you want to show the mean 
            and total profit, along with the number sold.<font color="#FF0000"> 
            </font>In addition, rather than repeating <em>Domestic</em> or <em>International</em> 
            values for each product, you want to show each category heading only 
            once.</p>
          <p>If you tried to create this report directly from query output, you 
            could calculate descriptive statistics by computing several columns, 
            but you couldn't achieve the presentation that you wanted. A simple, 
            powerful alternative is to use the Summary Tables task to create your 
            report.</p>
          <p>The two reports below show the difference between </p>
          <ul>
            <li>a default HTML report that is generated as query output</li>
            <li>a Summary Tables report that is generated by running a SAS Enterprise 
              Guide task against query output (a table).</li>
          </ul>
          <p></p></td>
    </tr>
  </table>
    <p><img src="images/m101_34a.gif" alt="summary tables report vs. HTML query output" width="381" height="650"></p>
    <p><br>
    <table width="85%" border="0" cellpadding="0" cellspacing="0">
      <tr valign="top"> 
        <td> <p>Let's see how you run a SAS Enterprise Guide task against your 
            query results to create a report.</p>
         </td>
      </tr>
    </table>
    <br>
  </div>
  
  <span id="divider" class="eg_div"><hr width="85%"></span>
  <div id="eg3" class="eg_div">
  <table width="85%" border="0" cellpadding="0" cellspacing="0">
      <tr valign="top"> 
        <td> <p>Earlier in this lesson, you created HTML reports directly as query 
            output. Often a report is enough, but sometimes you need to perform 
            other analyses on your query results before creating a report. This 
            is the case with your profit query, where you created a table as query 
            output. Now you need to analyze this data and create a report.</p>
          <p>As you saw earlier, if you specify a <strong>data table</strong> 
            or <strong>data view</strong> as your result format, you can run SAS 
            Enterprise Guide tasks against your query output.</p>
          <p><strong><br>
            Example: Creating a Summary Tables Report from Query Output</strong></p>
          <p>You've already created a query that shows profit for products. But 
            suppose you want to create a more complex report that is also attractively 
            formatted. In this report, for each product you want to show the mean 
            and total profit, along with the number sold.<font color="#FF0000"> 
            </font>In addition, rather than repeating <em>Domestic</em> or <em>International</em> 
            values for each product, you want to show each category heading only 
            once.</p>
          <p>If you tried to create this report directly from query output, you 
            could calculate descriptive statistics by computing several columns, 
            but you couldn't achieve the presentation that you wanted. A simple, 
            powerful alternative is to use the Summary Tables task to create your 
            report.</p>
          <p>The two reports below show the difference between </p>
          <ul>
            <li>a default HTML report that is generated as query output</li>
            <li>a Summary Tables report that is generated by running a SAS Enterprise 
              Guide task against query output (a table).</li>
          </ul>
          <p></p></td>
    </tr>
  </table>
    <p><img src="images3/m101_34.gif" alt="summary tables report vs. HTML query output" width="401" height="576"></p>
    <p><br>
    <table width="85%" border="0" cellpadding="0" cellspacing="0">
      <tr valign="top"> 
        <td> <p>Let's see how you run a SAS Enterprise Guide task against your 
            query results to create a report.</p>
         </td>
      </tr>
    </table>
    <br>
  </div>

  <p><br>

  
  <!-- InstanceEndEditable --> 
</center>
<script>writeNav_regular_bottom();</script>
</body>
<!-- InstanceEnd --></html>
