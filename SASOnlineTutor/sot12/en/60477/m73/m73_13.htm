<html><!-- InstanceBegin template="/Templates/informationObject.dwt" codeOutsideHTMLIsLocked="false" -->
<head>
<SCRIPT LANGUAGE="JavaScript" SRC="../tut.js"></SCRIPT>
<script language="JavaScript" src="../nav.js"></script>
<SCRIPT LANGUAGE="JavaScript">
 setPageTitle();
 setCookie();
  
// Drop down menu link- © Dynamic Drive (www.dynamicdrive.com)
// For full source code and 100's more DHTML scripts, visit http://www.dynamicdrive.com
// Credit MUST stay intact for use -->

</SCRIPT>

<!-- InstanceBeginEditable name="extrascript" -->
<SCRIPT LANGUAGE="JavaScript">
</SCRIPT>
<!-- InstanceEndEditable -->

<link rel="stylesheet" href="../tut.css">


<META http-equiv="Content-Type" content="text/html; charset=windows-1252">
</HEAD>

<body marginheight="0" marginwidth="0" topmargin="0" leftmargin="0" rightmargin="0" bgcolor="#FFFFF0">
<script>writeinformationObjectTopNav1();</script>
	  
	  <font color="#003399" size="3" face="Arial, Helvetica, sans-serif"><strong><!-- InstanceBeginEditable name="TopicTitle" -->Creating 
      a Table from a Query Result<!-- InstanceEndEditable --></strong></font> <!-- InstanceBeginEditable name="continued" --><!-- InstanceEndEditable -->
	  
<script>writeinformationObjectTopNav2();</script>
<br>
<center>
  <!-- InstanceBeginEditable name="content" --> 
  <table width="85%" border="0" cellpadding="0" cellspacing="0">
    <tr valign="top"> 
      <td> <p>Sometimes you want to create a new table that contains both columns 
          and rows that are derived from an existing table or set of tables. In 
          this situation, you can submit one PROC SQL step that does both of the 
          following: </p>
        <ul>
          <li>creates a new table</li>
          <li>populates the table with data from the result of a PROC SQL query. 
          </li>
        </ul>
        <p>To create a table from a query result, use a <strong>CREATE TABLE statement</strong> 
          that includes the <strong>keyword AS</strong> and the <strong>clauses 
          that are used in a query</strong>: SELECT, FROM, and any optional clauses, 
          such as ORDER BY. <br>
        </p></td>
    </tr>
  </table>
  <p><br>
  <table width="85%" border="1" align="center" cellpadding="10" cellspacing="0" bgcolor="#F7F7DE" title="General form, CREATE TABLE statement with query clauses">
    <tr> 
      <td align="left"><p><strong>General form, CREATE TABLE statement with query 
          clauses:</strong></p>
        <blockquote> 
          <p><font color="#003399"><strong>CREATE TABLE </strong> <em>table-name</em> 
            <strong>AS</strong><br>
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font color="#003399"><strong>SELECT</strong> 
            <em>column-1&lt;, ... column-n</em>&gt;<br>
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>&nbsp;&nbsp;FROM</strong> 
            <em>table-1 | view-1&lt;, ... table-n | view-n&gt;</em><br>
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;<em>optional 
            query clauses&gt;</em><strong>;</strong> </font> </p>
        </blockquote>
          <p> where </p>
          <ul>
            <li><font color="#003399"><em>table-name</em></font> specifies the 
              name of the table to be created</li>
            <li><strong><font color="#003399">SELECT</font></strong> specifies 
              the column(s) that will appear in the table</li>
            <li><strong><font color="#003399">FROM</font></strong> specifies the 
              table(s) or view(s) to be queried </li>
            <li><em><font color="#003399">optional query clauses</font></em> are 
              used to refine the query further and include WHERE, GROUP BY, HAVING, 
              and ORDER BY.</li>
          </ul>
        </td>
    </tr>
  </table>
  <p><br>
  <table cellpadding="0" cellspacing="0" border="0" width="85%">
    <tr> 
      <td><p>You should be familiar with the use of the CREATE TABLE statement 
          to create a table from a query result. Let's quickly review the basics 
          of this method.</p>
        <p> When a table is created from a query result,</p>
        <ul>
          <li> the new table is populated with data that is derived from one or 
            more tables or views that are referenced in the query's FROM clause</li>
          <li> the new table contains the columns that are specified in the query's 
            SELECT clause</li>
          <li> the new table's columns have the same column attributes (type, 
            length, informat, and format) as those of the selected source columns.</li>
        </ul></td>
    </tr>
  </table>
  <table width="85%" border="0" cellpadding="2" cellspacing="0">
    <tr> 
      <td valign="top" width="24"><img src="../navimages/note.gif" width="20" height="20" alt="Note"></td>
      <td valign="top">When you are creating a table, if you do not specify a 
        column alias for a calculated column, SAS will assign a column name, such 
        as <code>_TEMA001</code>.</td>
    </tr>
  </table>
  <br>
  <table cellpadding="0" cellspacing="0" border="0" width="85%">
    <tr> 
      <td><p>When query clauses are used within a CREATE TABLE statement, that 
          query's automatic report generation is shut off. Only the new table 
          is generated as output.</p></td>
    </tr>
  </table>
  <p><br>
  <table width="85%" border="0" cellpadding="0" cellspacing="0">
    <tr valign="top"> 
      <td> <h2>Example</h2>
        <p> Suppose you want to create a new, temporary table that contains data 
          for ticket agents who are employed by an airline. The data that you 
          need is a subset of the data contained in two existing tables, <strong>Sasuser.Payrollmaster</strong> 
          and <strong>Sasuser.Staffmaster</strong>. The following PROC SQL step 
          creates the new table <strong>Work.Ticketagents</strong> from the result 
          of a query on the two existing tables. The WHERE clause selects the 
          subset of rows for employees whose <code>JobCode</code> contains <em>TA</em>.</p></td>
    </tr>
  </table>
  <br>
  <table width="85%" border="0" cellpadding="0" cellspacing="0">
    <tr valign="top"> 
      <td> <pre><font color="#003399">     proc sql;
        <strong>create</strong> table work.ticketagents as
           <strong>select</strong> lastname, firstname,
                  jobcode, salary
              from sasuser.payrollmaster,
                   sasuser.staffmaster
              where payrollmaster.empid
                    = staffmaster.empid
                    and jobcode contains 'TA';</font></pre></td>
    </tr>
  </table>
  <table width="85%" border="0" cellpadding="2" cellspacing="0">
    <tr> 
      <td valign="top" width="24"><img src="../navimages/note.gif" width="20" height="20" alt="Note"></td>
      <td valign="top">Because this query lists two tables in the FROM clause 
        and subsets rows based on a WHERE clause, the query is actually a PROC 
        SQL inner join.</td>
    </tr>
  </table>
  <br>
  <table width="85%" border="0" cellpadding="0" cellspacing="0">
    <tr valign="top"> 
      <td> <p>The new table <strong>Work.Ticketagents</strong> is not empty; it 
          contains rows of data. Therefore, you can submit a SELECT statement 
          to display <strong>Work.Ticketagents</strong> as a report:<br>
        </p></td>
    </tr>
  </table>
  <br>
  <table width="85%" border="0" cellpadding="0" cellspacing="0">
    <tr valign="top"> 
      <td> <pre><font color="#003399">        select *
           from work.ticketagents;</font></pre></td>
    </tr>
  </table>
  <table width="85%" border="0" cellpadding="0" cellspacing="0">
    <tr valign="top"> 
      <td> <p>The first four rows of <strong>Work.Ticketagents</strong> are shown 
          below.<br>
        </p></td>
    </tr>
  </table>
  <p><br>
  <CENTER>
    <font  face="Arial, Helvetica, Helv" size="2" color="#002288"> 
    <TABLE  cellspacing=1 cellpadding=2 rules=GROUPS frame=BOX border=1 bgcolor="#FFFFF0" bordercolor="#000000" title="PROC SQL Output">
      <thead>
        <TR> 
          <TD ALIGN=LEFT VALIGN=BOTTOM bgcolor="#CCCCCC"><font  face="Arial, Helvetica, Helv" size="3" color="#003399"><b>LastName</b></font></TD>
          <TD ALIGN=LEFT VALIGN=BOTTOM bgcolor="#CCCCCC"><font  face="Arial, Helvetica, Helv" size="3" color="#003399"><b>FirstName</b></font></TD>
          <TD ALIGN=LEFT VALIGN=BOTTOM bgcolor="#CCCCCC"><font  face="Arial, Helvetica, Helv" size="3" color="#003399"><b>JobCode</b></font></TD>
          <TD ALIGN=RIGHT VALIGN=BOTTOM bgcolor="#CCCCCC"><font  face="Arial, Helvetica, Helv" size="3" color="#003399"><b>Salary</b></font></TD>
        </TR>
      </thead>
      <tbody>
        <TR> 
          <TD ALIGN=LEFT bgcolor="#EFEFEF"><font  face="Arial, Helvetica, Helv" size="2" color="#000000">ADAMS</font></TD>
          <TD ALIGN=LEFT bgcolor="#EFEFEF"><font  face="Arial, Helvetica, Helv" size="2" color="#000000">GERALD</font></TD>
          <TD ALIGN=LEFT bgcolor="#EFEFEF"><font  face="Arial, Helvetica, Helv" size="2" color="#000000">TA2</font></TD>
          <TD ALIGN=RIGHT bgcolor="#EFEFEF"><font  face="Arial, Helvetica, Helv" size="2" color="#000000">$48,126</font></TD>
        </TR>
        <TR> 
          <TD ALIGN=LEFT bgcolor="#EFEFEF"><font  face="Arial, Helvetica, Helv" size="2" color="#000000">AVERY</font></TD>
          <TD ALIGN=LEFT bgcolor="#EFEFEF"><font  face="Arial, Helvetica, Helv" size="2" color="#000000">JERRY</font></TD>
          <TD ALIGN=LEFT bgcolor="#EFEFEF"><font  face="Arial, Helvetica, Helv" size="2" color="#000000">TA3</font></TD>
          <TD ALIGN=RIGHT bgcolor="#EFEFEF"><font  face="Arial, Helvetica, Helv" size="2" color="#000000">$54,351</font></TD>
        </TR>
        <TR> 
          <TD ALIGN=LEFT bgcolor="#EFEFEF"><font  face="Arial, Helvetica, Helv" size="2" color="#000000">BLALOCK</font></TD>
          <TD ALIGN=LEFT bgcolor="#EFEFEF"><font  face="Arial, Helvetica, Helv" size="2" color="#000000">RALPH</font></TD>
          <TD ALIGN=LEFT bgcolor="#EFEFEF"><font  face="Arial, Helvetica, Helv" size="2" color="#000000">TA2</font></TD>
          <TD ALIGN=RIGHT bgcolor="#EFEFEF"><font  face="Arial, Helvetica, Helv" size="2" color="#000000">$45,661</font></TD>
        </TR>
        <TR> 
          <TD ALIGN=LEFT bgcolor="#EFEFEF"><font  face="Arial, Helvetica, Helv" size="2" color="#000000">BOSTIC</font></TD>
          <TD ALIGN=LEFT bgcolor="#EFEFEF"><font  face="Arial, Helvetica, Helv" size="2" color="#000000">MARIE</font></TD>
          <TD ALIGN=LEFT bgcolor="#EFEFEF"><font  face="Arial, Helvetica, Helv" size="2" color="#000000">TA3</font></TD>
          <TD ALIGN=RIGHT bgcolor="#EFEFEF"><font  face="Arial, Helvetica, Helv" size="2" color="#000000">$54,299</font></TD>
        </TR>
      </tbody>
    </TABLE>
    </font> 
  </CENTER>
  <p><br>
  <table width="85%" border="0" cellpadding="0" cellspacing="0">
    <tr valign="top"> 
      <td> <p>The SAS log also displays a message, indicating that the table has 
          been created.<br>
        </p></td>
    </tr>
  </table>
  <p><br>
  <div align="center">SAS Log<br>
    <table bgcolor="#F7F7DE" border="1" cellpadding="10" cellspacing="0" title="SAS Log">
      <tr> 
        <td> <pre>NOTE: Table WORK.TICKETAGENTS created, with 41 rows and 4 columns.</pre> 
        </td>
      </tr>
    </table>
  </div>
  <p><br><!-- InstanceEndEditable --> 
</center>
<script>writeNav_regular_bottom();</script>
</body>
<!-- InstanceEnd --></html>
