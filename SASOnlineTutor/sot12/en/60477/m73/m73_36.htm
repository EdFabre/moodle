<html><!-- InstanceBegin template="/Templates/eg_practice_oldstyle.dwt" codeOutsideHTMLIsLocked="false" -->
<head>

<SCRIPT LANGUAGE="JavaScript" SRC="../tut.js"></SCRIPT>
<script language="JavaScript" src="../nav.js"></script>

<SCRIPT LANGUAGE="JavaScript">
 setPageTitle();
 setCookie();
 checkPracticeCookie();
 checkVersion();
 
// Drop down menu link- © Dynamic Drive (www.dynamicdrive.com)
// For full source code and 100's more DHTML scripts, visit http://www.dynamicdrive.com
// Credit MUST stay intact for use -->

</SCRIPT>

<!-- InstanceBeginEditable name="extrascript" -->
<SCRIPT LANGUAGE="JavaScript">

</SCRIPT>
<!-- InstanceEndEditable -->

<link rel="stylesheet" href="../tut.css">


<META http-equiv="Content-Type" content="text/html; charset=windows-1252">
</HEAD>

<body marginheight="0" marginwidth="0" topmargin="0" leftmargin="0" rightmargin="0" bgcolor="#FFFFF0" onLoad="sizePractice(); writeEG_div()" onUnload="resizePage()">
<script>writeeg_practiceTopNav1();</script>
		  
		  <!-- InstanceBeginEditable name="task_description" --> 
            <p><strong>Create a temporary table that has integrity constraints, 
              and insert rows with different values for the UNDO_POLICY= option 
              in effect.</strong></p>
            <!-- InstanceEndEditable -->
			
<script>writeeg_practiceTopNav2();</script>
<center>
 <p>
<!-- InstanceBeginEditable name="optionalNote" --> <!-- InstanceEndEditable -->
<p> 
<!-- InstanceBeginEditable name="task_steps" --> 
<div id="le1_le2_eg1_eg2_eg3" class="eg_div">
<table width="85%" border="0" cellpadding="0" cellspacing="0" align="center">
  <tr valign="top"> 
    <td> 
      <ol>
          <li>Write a PROC SQL step that creates a temporary table based on column 
            specifications. The table is named <strong>Work.Campers </strong>and 
            is intended to store data about children who attend a summer camp. 
            The table should include zero rows and four columns with the following 
            attributes:<br>
            <br>
            <ul>
              <li><code>CampID</code>: numeric, length=8 (default), label=<strong>Camper 
                ID</strong></li>
              <li><code>FName</code>: character, length=10</li>
              <li><code>LName</code>: character, length=15</li>
              <li><code>DOB</code>: numeric, length=8 (default), format=date9.</li>
            </ul>
            <br>
            The step should also create an integrity constraint, named <code>Unique_ID</code>, 
            which ensures that all values entered for <code>CampID</code> are 
            unique.<br>
            <br>
            Add a QUIT statement to the step. Submit the step and view the SAS 
            log to verify that the table was created as specified. <br>
            <br>
            <li>Write a PROC SQL step to display information about the table's integrity 
              constraints. Add a QUIT statement and submit the step.<br>
            <br>
          <li> Write a PROC SQL step to load the following rows of data into the 
            table, by using the SET statement. Values are listed in the order 
            in which the columns appear in the table:<br>
            <br>
            <ul>
              <li><em>1001</em>, <em>Mara</em>, <em>Tolerud</em>, <em>'17JUL1993'd</em></li>
              <li><em>1002</em>, <em>Kino</em>, <em>Parks</em>, <em>'22SEP1995'd</em></li>
              <li><em>1002</em>, <em>Adele</em>, <em>Ruiz, '01DEC1992'd</em></li>
            </ul>
            <br>
            Add a QUIT statement to the step. Submit the step and view the SAS 
            log to find out whether the rows were inserted into the table. <br>
            <br>
          <li>Modify the preceding step so that, when the same rows are submitted 
            for insertion into the table, PROC SQL will insert the rows that meet 
            the constraint and skip any rows that do not, regardless of whether 
            the changes can be made reliably. Submit this modified step and and 
            view the SAS log to determine which rows were inserted into the table.<br>
            <br>
          <li>Write a PROC SQL query to display all columns and rows of the table 
            <strong>Work.Campers</strong>. Add a QUIT statement to the query. 
            Submit the query and view the <a href="JavaScript: openOther('m73_36a.htm')">output</a>.<br>
              </ol>
      
       </td>
  </tr>
</table>
</div>
<div id="v89_v91" class="eg_div">
<table width="85%" border="0" cellpadding="0" cellspacing="0" align="center">
  <tr valign="top"> 
        <td> <ol>
            <li>Write a PROC SQL step that creates a temporary table based on 
              column specifications. The table is named <strong>Work.Campers </strong>and 
              is intended to store data about children who attend a summer camp. 
              The table should include zero rows and four columns with the following 
              attributes:<br>
              <br>
              <ul>
                <li><code>CampID</code>: numeric, length=8 (default), label=<strong>Camper 
                  ID</strong></li>
                <li><code>FName</code>: character, length=10</li>
                <li><code>LName</code>: character, length=15</li>
                <li><code>DOB</code>: numeric, length=8 (default), format=date9.</li>
              </ul>
              <br>
              The step should also create an integrity constraint, named <code>Unique_ID</code>, 
              which ensures that all values entered for <code>CampID</code> are 
              unique.<br>
              <br>
              Add a QUIT statement to the step. Submit the step and view the SAS 
              log to verify that the table was created as specified. <br>
              <br>
            <li>Write a PROC SQL step to display information about the table's 
              integrity constraints in the SAS log. Add a QUIT statement and submit 
              the step.<br>
              <br>
            <li> Write a PROC SQL step to load the following rows of data into 
              the table, by using the SET statement. Values are listed in the 
              order in which the columns appear in the table:<br>
              <br>
              <ul>
                <li><em>1001</em>, <em>Mara</em>, <em>Tolerud</em>, <em>'17JUL1993'd</em></li>
                <li><em>1002</em>, <em>Kino</em>, <em>Parks</em>, <em>'22SEP1995'd</em></li>
                <li><em>1002</em>, <em>Adele</em>, <em>Ruiz, '01DEC1992'd</em></li>
              </ul>
              <br>
              Add a QUIT statement to the step. Submit the step and view the SAS 
              log to find out whether the rows were inserted into the table. <br>
              <br>
            <li>Modify the preceding step so that, when the same rows are submitted 
              for insertion into the table, PROC SQL will insert the rows that 
              meet the constraint and skip any rows that do not, regardless of 
              whether the changes can be made reliably. Submit this modified step 
              and and view the SAS log to determine which rows were inserted into 
              the table.<br>
              <br>
            <li>Write a PROC SQL query to display all columns and rows of the 
              table <strong>Work.Campers</strong>. Add a QUIT statement to the 
              query. Submit the query and view the <a href="JavaScript: openOther('m73_36a.htm')">output</a>.<br>
          </ol>
      
       </td>
  </tr>
</table>
</div>
          <!-- InstanceEndEditable -->
      
</center>
<center>
<script>writeoldstylePracticeSolutionLink();</script>

<!-- InstanceBeginEditable name="task_solutions" -->
<div id="le1_le2_eg1_eg2_eg3_v89_v91_solution" class="eg_div">
<table width="85%" border="0" cellpadding="0" cellspacing="0" align="center">
  <tr valign="top"> 
    <td> 
   <!--STEP 1-->
<ol><li>Write and submit the following PROC SQL step that contains a CREATE TABLE statement: 
<font color="#003399">
              <pre>
proc sql;
   create table work.campers
      (CampID num label='Camper ID',
      FName char(10),
      LName char(15),
      DOB num format=date9.,
      constraint unique_id unique(campid));
quit;</pre>
              </font>
The following message should appear in the SAS log: <br>
<pre>NOTE: Table WORK.CAMPERS created, with 0 rows <br>
and 4 columns.</pre>
<!--STEP 2-->
<li>Write and submit the following PROC SQL step that contains a DESCRIBE TABLE CONSTRAINTS statement: 
<font color="#003399">
              <pre>
proc sql;
   describe table constraints work.campers;
quit;</pre>
              </font>
The alphabetic list of integrity constraints should contain the constraint <code>Unique_ID</code>.<br><br>
<!--STEP 3-->
<li>Write and submit the following PROC SQL step that contains an INSERT statement and SET clauses: 
<font color="#003399">
              <pre>
proc sql;
   insert into work.campers
       set campid=1001,fname='Mara',
           lname='Tolerud',dob='17JUL1993'd
       set campid=1002,fname='Kino',
           lname='Parks',dob='22SEP1995'd
       set campid=1002,fname='Adele',
           lname='Ruiz',dob='01DEC1992'd;
quit;</pre>
              </font>
The following message should appear in the SAS log: <br>
<pre>ERROR: Add/Update failed for data set WORK.CAMPERS <br>
because data value(s) do not comply with integrity <br>
constraint unique_id.  <br>
NOTE: Deleting the successful inserts before error <br>
noted above to restore table to a consistent state.</pre>
<!--STEP 4-->
<li>Write and submit the following PROC SQL step that contains an INSERT statement and SET clauses: 
<font color="#003399">
              <pre>
proc sql undo_policy=none;
   insert into work.campers
       set campid=1001,fname='Mara',
           lname='Tolerud',dob='17JUL1993'd
       set campid=1002,fname='Kino',
           lname='Parks',dob='22SEP1995'd
       set campid=1002,fname='Adele',
           lname='Ruiz',dob='01DEC1992'd;
quit;</pre>
              </font>
The second and third values of <code>CampID</code> are the same (not unique). Therefore, the following message should appear in the SAS log: <br>
<pre>WARNING: The SQL option UNDO_POLICY=REQUIRED <br>
is not in effect. If an error is detected when <br>
processing this INSERT statement, that error will <br>
not cause the entire statement to fail. <br>
ERROR: Add/Update failed for data set WORK.CAMPERS <br>
because data value(s) do not comply with integrity <br>
constraint unique_id. <br>
NOTE: 3 rows were inserted into WORK.CAMPERS -- of <br>
these 1 row was rejected as an ERROR, leaving 2 <br>
rows that were inserted successfully.</pre>
<!--STEP 5-->
<li>Write and submit the following PROC SQL query: 
<font color="#003399">
              <pre>
proc sql;
   select *
      from work.campers;
quit;</pre>
              </font>
The expected output is linked from step 5 in this practice. </ol>


      
       </td>
  </tr>
</table>
</div>
  <!-- InstanceEndEditable -->
  
</center>
<script>writeNav_regular_bottom();</script>

</body>
<!-- InstanceEnd --></html>