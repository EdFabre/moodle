<html><!-- InstanceBegin template="/Templates/informationObject.dwt" codeOutsideHTMLIsLocked="false" -->
<head>
<SCRIPT LANGUAGE="JavaScript" SRC="../tut.js"></SCRIPT>
<script language="JavaScript" src="../nav.js"></script>
<SCRIPT LANGUAGE="JavaScript">
 setPageTitle();
 setCookie();
  
// Drop down menu link- © Dynamic Drive (www.dynamicdrive.com)
// For full source code and 100's more DHTML scripts, visit http://www.dynamicdrive.com
// Credit MUST stay intact for use -->

</SCRIPT>

<!-- InstanceBeginEditable name="extrascript" -->
<SCRIPT LANGUAGE="JavaScript">
</SCRIPT>
<!-- InstanceEndEditable -->

<link rel="stylesheet" href="../tut.css">


<META http-equiv="Content-Type" content="text/html; charset=windows-1252">
</HEAD>

<body marginheight="0" marginwidth="0" topmargin="0" leftmargin="0" rightmargin="0" bgcolor="#FFFFF0">
<script>writeinformationObjectTopNav1();</script>
	  
	  <font color="#003399" size="3" face="Arial, Helvetica, sans-serif"><strong><!-- InstanceBeginEditable name="TopicTitle" -->Creating 
      a Table That Has Integrity Constraints<!-- InstanceEndEditable --></strong></font> <!-- InstanceBeginEditable name="continued" --><font color="#003399" size="3" face="Arial, Helvetica, sans-serif">(continued)</font><!-- InstanceEndEditable -->
	  
<script>writeinformationObjectTopNav2();</script>
<br>
<center>
  <!-- InstanceBeginEditable name="content" --> 
  <table width="85%" border="0" cellpadding="0" cellspacing="0">
    <tr valign="top"> 
      <td><h2>Example: Creating a Constraint in a Column Specification</h2>
        <p>Suppose you need to create the table <strong>Work.Employees</strong> 
          to store the identification number, name, gender, and hire date for 
          all employees. In addition, you want to ensure that</p>
        <ul>
          <li>the <code>ID</code> column contains only values that are nonmissing 
            and unique</li>
          <li>the <code>Gender</code> column contains only the values <em>M</em> 
            and <em>F</em>.</li>
        </ul>
        <p>The following PROC SQL step creates the table <strong>Work.Employees,</strong> 
          which contains four columns and integrity constraints for two of those 
          columns:</p></td>
    </tr>
  </table>
  <br>
  <table cellpadding="0" cellspacing="0" border="0" width="85%">
    <tr> 
      <td height="18"><pre><font color="#003399">     proc sql;
        create table work.employees
           (ID char (5) <strong>primary key</strong>,
           Name char(10),
           Gender char(1) <strong>not null check(gender in ('M','F')</strong>),
           HDate date label='Hire Date');</font></pre></td>
    </tr>
  </table>
  <table cellpadding="0" cellspacing="0" border="0" width="85%">
    <tr> 
      <td height="18"><p>In the column specification for <code>ID</code>, the 
          PRIMARY KEY column constraint ensures that the <code>ID</code> column 
          will contain only values that are nonmissing and unique. </p>
        <p>The column specification for <code>Gender</code> defines two integrity 
          constraints:</p>
        <ul>
          <li>The NOT NULL column constraint ensures that the values of <code>Gender</code> 
            will be nonmissing values.<br>
            <br>
          </li>
          <li> The CHECK column constraint ensures that the values <code></code>of 
            <code>Gender</code> will satisfy the expression <code><font color="#003399">gender 
            in ('M','F')</font></code>.</li>
        </ul>
        <p>Next, let's look at the other method of creating integrity constraints: 
          specifying a constraint specification in the CREATE TABLE statement.</p></td>
    </tr>
  </table>
  <p><br>
  <!-- InstanceEndEditable --> 
</center>
<script>writeNav_regular_bottom();</script>
</body>
<!-- InstanceEnd --></html>
