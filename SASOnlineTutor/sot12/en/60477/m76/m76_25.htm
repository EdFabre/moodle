<html><!-- InstanceBegin template="/Templates/informationObject.dwt" codeOutsideHTMLIsLocked="false" -->
<head>
<SCRIPT LANGUAGE="JavaScript" SRC="../tut.js"></SCRIPT>
<script language="JavaScript" src="../nav.js"></script>
<SCRIPT LANGUAGE="JavaScript">
 setPageTitle();
 setCookie();
  
// Drop down menu link- © Dynamic Drive (www.dynamicdrive.com)
// For full source code and 100's more DHTML scripts, visit http://www.dynamicdrive.com
// Credit MUST stay intact for use -->

</SCRIPT>

<!-- InstanceBeginEditable name="extrascript" -->
<SCRIPT LANGUAGE="JavaScript">
</SCRIPT>
<!-- InstanceEndEditable -->

<link rel="stylesheet" href="../tut.css">


<META http-equiv="Content-Type" content="text/html; charset=windows-1252">
</HEAD>

<body marginheight="0" marginwidth="0" topmargin="0" leftmargin="0" rightmargin="0" bgcolor="#FFFFF0">
<script>writeinformationObjectTopNav1();</script>
	  
	  <font color="#003399" size="3" face="Arial, Helvetica, sans-serif"><strong><!-- InstanceBeginEditable name="TopicTitle" -->Additional 
      Features <!-- InstanceEndEditable --></strong></font> <!-- InstanceBeginEditable name="continued" --><!-- InstanceEndEditable -->
	  
<script>writeinformationObjectTopNav2();</script>
<br>
<center>
  <!-- InstanceBeginEditable name="content" --> 
  <table width="85%" border="0" cellpadding="0" cellspacing="0">
    <tr valign="top"> 
      <td> <h2>Restricting the Number of Loops</h2>
        <p>The <strong>LOOPS=</strong> option restricts the number of iterations 
          of the inner loop in PROC SQL. By setting a limit, you can prevent queries 
          from consuming excessive resources.</p>
        <p>For example, joining three large tables without meeting the join-matching 
          conditions could create a huge internal table that would be inefficient 
          to process. Use the LOOPS= option to prevent this from happening. </p>
        <p>You can use the PROMPT | NOPROMPT option to modify the effect of the 
          LOOPS= option so that you are prompted to stop or continue processing 
          when the limit set by the LOOPS= option is reached.<br>
        </p>
        </td>
    </tr>
  </table>
  <br>
  <table width="85%" border="0" cellpadding="2" cellspacing="0">
    <tr> 
      <td valign="top" width="24"><img src="../navimages/note.gif" width="20" height="20" alt="Note"></td>
      <td valign="top">You can use the number of iterations that are reported 
        in the SQLOOPS macro variable (after each PROC SQL statement is executed) 
        to gauge an appropriate value for the LOOPS= option. For more information 
        about the SQLOOPS macro variable, see the 
        <!--doc reference-->
        SAS documentation for the SQL procedure.</td>
    </tr>
  </table>
  <br>
  <br>
  <table width="85%" border="0" cellpadding="0" cellspacing="0">
    <tr valign="top"> 
      <td> <h2><a name="errorstop"></a>Stopping Execution in PROC SQL After an 
          Error</h2>
        <p>You already know that you can use the EXEC | NOEXEC option to specify 
          whether a statement should be executed after its syntax is checked for 
          accuracy. If the EXEC option is in effect, SAS checks the PROC SQL syntax 
          for accuracy and, if no error is found, executes the SQL statement. 
        </p>
        <p>The <strong>ERRORSTOP | NOERRORSTOP</strong> option specifies whether 
          PROC SQL stops executing if it encounters an error. This option is useful 
          only when the EXEC option is in effect. The default is ERRORSTOP in 
          <!--glossary term -->
          batch or 
          <!--glossary term -->
          in a noninteractive session and 
          <!--glossary term -->
          NOERRORSTOP in an interactive SAS session.</p>
        <p><strong>ERRORSTOP</strong> instructs PROC SQL to stop executing the 
          statements but to continue checking the syntax after it has encountered 
          an error.<strong> </strong>ERRORSTOP has an effect only when SAS is 
          running in batch or in noninteractive execution mode.</p>
        <p> <strong>NOERRORSTOP</strong> instructs PROC SQL to execute the statements 
          and to continue checking the syntax after an error occurs. NOERRORSTOP 
          is useful if you want a batch job to continue executing SQL procedure 
          statements after an error is encountered. </p>
        </td>
    </tr>
  </table>
  <p> 
  <p><br>
  <!-- InstanceEndEditable --> 
</center>
<script>writeNav_regular_bottom();</script>
</body>
<!-- InstanceEnd --></html>
