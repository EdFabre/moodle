<html><!-- InstanceBegin template="/Templates/informationObject.dwt" codeOutsideHTMLIsLocked="false" -->
<head>
<SCRIPT LANGUAGE="JavaScript" SRC="../tut.js"></SCRIPT>
<script language="JavaScript" src="../nav.js"></script>
<SCRIPT LANGUAGE="JavaScript">
 setPageTitle();
 setCookie();
  
// Drop down menu link- © Dynamic Drive (www.dynamicdrive.com)
// For full source code and 100's more DHTML scripts, visit http://www.dynamicdrive.com
// Credit MUST stay intact for use -->

</SCRIPT>

<!-- InstanceBeginEditable name="extrascript" -->
<SCRIPT LANGUAGE="JavaScript">
</SCRIPT>
<!-- InstanceEndEditable -->

<link rel="stylesheet" href="../tut.css">


<META http-equiv="Content-Type" content="text/html; charset=windows-1252">
</HEAD>

<body marginheight="0" marginwidth="0" topmargin="0" leftmargin="0" rightmargin="0" bgcolor="#FFFFF0">
<script>writeinformationObjectTopNav1();</script>
	  
	  <font color="#003399" size="3" face="Arial, Helvetica, sans-serif"><strong><!-- InstanceBeginEditable name="TopicTitle" -->Using 
      the Autocall Facility<!-- InstanceEndEditable --></strong></font> <!-- InstanceBeginEditable name="continued" --><!-- InstanceEndEditable -->
	  
<script>writeinformationObjectTopNav2();</script>
<br>
<center>
  <!-- InstanceBeginEditable name="content" -->
<table width="85%" border="0" cellpadding="0" cellspacing="0" align="center">
  <tr valign="top"> 
    <td>
<p>You can make macros accessible to your SAS session or program by using the 
          <strong>autocall facility</strong> to search predefined source libraries 
          for macro definitions. These predefined source libraries are known as 
          <strong>autocall libraries</strong>. You can store your macro definitions 
          permanently in an autocall library, and you can set up multiple autocall 
          libraries. 
        <P> When you use this approach, you do not need to compile the macro in order to 
        make it available for execution. That is, if the macro 
        definition is stored in an autocall library, then you do not need to submit or include 
        the macro definition before you submit a call to the macro. 
        <P> Suppose you have stored a file that contains a macro definition in your 
          autocall library. When you<strong> submit a call</strong> to that macro, 
        <ul>
          <li>the macro processor searches the autocall library for the macro</li>
          <li>the macro is compiled and stored as it would be if you had submitted 
            it (that is, the compiled macro is stored in the default location 
            of <strong>Work.Sasmacr</strong>)</li>
          <li>the macro is executed.</li>
      </ul>
     
      <p>Once it has been compiled, the macro can be executed as needed throughout 
        the same SAS session. At the end of the SAS session, the compiled macro 
        is deleted from the <strong>Work.Sasmacr </strong>catalog, but the source 
        code remains in the autocall library.</td>
  </tr>
</table><P><BR>
<!-- InstanceEndEditable --> 
</center>
<script>writeNav_regular_bottom();</script>
</body>
<!-- InstanceEnd --></html>
