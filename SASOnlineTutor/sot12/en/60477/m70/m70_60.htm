<html><!-- InstanceBegin template="/Templates/summary.dwt" codeOutsideHTMLIsLocked="false" -->
<head>

<SCRIPT LANGUAGE="JavaScript" SRC="../tut.js"></SCRIPT>
<script language="JavaScript1.2" src="../nav.js"></script>


<SCRIPT LANGUAGE="JavaScript">
 setPageTitle();
 setCookie();
 
// Drop down menu link- © Dynamic Drive (www.dynamicdrive.com)
// For full source code and 100's more DHTML scripts, visit http://www.dynamicdrive.com
// Credit MUST stay intact for use -->

</SCRIPT>

<!-- InstanceBeginEditable name="extrascript" -->
<SCRIPT LANGUAGE="JavaScript">
</SCRIPT>
<!-- InstanceEndEditable -->

<link rel="stylesheet" href="../tut.css">

<META http-equiv="Content-Type" content="text/html; charset=windows-1252">
</HEAD>

<body marginheight="0" marginwidth="0" topmargin="0" leftmargin="0" rightmargin="0" bgcolor="#FFFFF0">
<script>writeinformationObjectTopNav1();</script>
 
      <font color="#003399" size="3" face="Arial, Helvetica, sans-serif"><strong><script>document.write(summaryTitle)</script></strong></font>
 
 
<script>writeinformationObjectTopNav2();</script>
<br>
<center><TABLE cellpadding=0 cellspacing=0 border=0 width="85%" align="center">
  <TR>
      <TD align="left">
      
      <p><script>document.write(summaryPageContains)</script></p>
     <ul><!-- InstanceBeginEditable name="links" -->
        <LI> <A HREF="#Text" onMouseOver="window.status='Go to the text summary section.'; "
		onMouseOut="window.status=''">a text summary of the material taught in 
          the lesson</A> 
        <LI> <A HREF="#Syntax" onMouseOver="window.status='Go to the syntax section.'; "
		onMouseOut="window.status=''">syntax for&nbsp;statements and options</A> 
          <LI> <A HREF="#Sample" onMouseOver="window.status='Go to the sample program section.'; "
		onMouseOut="window.status=''">sample programs</A> 
          <LI> <A HREF="#Points" onMouseOver="window.status='Go to the points to remember section.'; "
		onMouseOut="window.status=''">points to remember</A>.
      <!-- InstanceEndEditable --></ul>
<P>
	  <HR>
      </TD>
    </TR>
  </TABLE>
  <P>

<!-- InstanceBeginEditable name="textsummaryintro" -->     
<TABLE cellpadding=0 cellspacing=0 border=0 width="85%" align="center">
  <TR>
	<TD align="left"><h2><STRONG><A NAME="Text"><script>document.write(summaryPageTextSummaryTitle);</script></A></STRONG> </h2>
      <P>
	  <EM><script>document.write(summaryPageDirections);</script></EM></TD>
      </TR>
    </TABLE>
<!-- InstanceEndEditable -->
  <br>
<!-- InstanceBeginEditable name="textsummary" --> 
<table width="85%" border="0" cellpadding="0" cellspacing="0" align="center">
    <tr valign="top"> 
      <td> <p><strong>Viewing SELECT Statement Syntax</strong> <br>
          The <a href="m70_2.htm" onClick="suggestBack()">SELECT statement and 
          its subordinate clauses</a> are the building blocks that you use to 
          construct all PROC SQL queries.</p>
        <p><strong>Displaying All Columns</strong> <br>
          To display all columns in the order in which they are stored in the 
          table, use <a href="m70_3.htm" onClick="suggestBack()">an asterisk (*)</a> 
          in the SELECT clause. To write the expanded list of columns to the SAS 
          log, use the <a href="m70_3.htm#feedback" onClick="suggestBack()">FEEDBACK 
          option</a> in the PROC SQL statement.</p>
        <p><strong>Limiting the Number of Rows Displayed</strong> <br>
          To limit the number of rows that PROC SQL displays as output, use the 
          <a href="m70_5.htm" onClick="suggestBack()">OUTOBS=<em>n</em> option</a> 
          in the PROC SQL statement.</p>
        <p><strong>Eliminating Duplicate Rows from Output</strong> <br>
          To eliminate duplicate rows from your query results, use the <a href="m70_6.htm" onClick="suggestBack()"> 
          keyword DISTINCT</a> in the SELECT clause.</p>
        <p><strong>Subsetting Rows by Using Conditional Operators</strong> <br>
          In a PROC SQL query, use the WHERE clause with any valid SAS expression 
          to subset data. The SAS expression can contain one or more operators, 
          including the following conditional operators: 
        <ul>
          <li>the <a href="m70_9.htm" onClick="suggestBack()">BETWEEN-AND operator</a> 
            selects within an inclusive range of values</li>
          <li>the <a href="m70_10.htm" onClick="suggestBack()">CONTAINS or ? operator</a> 
            selects a character string</li>
          <li>the <a href="m70_11.htm" onClick="suggestBack()">IN operator</a> 
            selects from a list of fixed values</li>
          <li>the <a href="m70_13.htm" onClick="suggestBack()">IS MISSING or IS 
            NULL operator</a> selects missing values</li>
          <li>the <a href="m70_14.htm" onClick="suggestBack()">LIKE operator</a> 
            selects a pattern</li>
          <li>the <a href="m70_15.htm" onClick="suggestBack()">sounds-like (=*) 
            operator</a> selects a spelling variation</li>
        </ul>
        <p><strong>Subsetting Rows by Using Calculated Values</strong> <br>
          It is important to understand how PROC SQL <a href="m70_17.htm" onClick="suggestBack()">processes 
          calculated columns</a>. When you use a column alias in the WHERE or 
          the HAVING clause to refer to a calculated value, you must also use 
          the <a href="m70_18.htm" onClick="suggestBack()"> keyword CALCULATED</a> 
          along with the alias.</p>
        <p><strong>Enhancing Query Output</strong> <br>
          You can enhance PROC SQL query output by using SAS enhancements such 
          as <a href="m70_22.htm" onClick="suggestBack()">column formats and labels</a>, 
          <a href="m70_23.htm" onClick="suggestBack()">titles and footnotes</a>, 
          and <a href="m70_24.htm" onClick="suggestBack()">character constants</a>.</p>
        <p><strong>Summarizing and Grouping Data</strong> <br>
          PROC SQL <a href="m70_26.htm" onClick="suggestBack()">calculates summary 
          functions and outputs results</a> differently, depending on a combination 
          of factors:</p>
        <ul>
          <li>whether the summary function specifies <a href="m70_29.htm" onClick="suggestBack()">one 
            or multiple columns</a> as arguments</li>
          <li>whether the query contains a <a href="m70_30.htm" onClick="suggestBack()">GROUP 
            BY clause</a></li>
          <li>if the summary function is specified in a SELECT clause, whether 
            there are <a href="m70_30.htm#outside" onClick="suggestBack()">additional 
            columns listed that are outside the summary function</a></li>
          <li>whether the WHERE clause, if there is one, contains only <a href="m70_28.htm#where" onClick="suggestBack()">columns 
            that are specified in the SELECT clause.</a></li>
        </ul>
        <p>To count non-missing values, use the <a href="m70_33.htm" onClick="suggestBack()">COUNT 
          summary function</a>.</p>
        <p>To select the groups to be displayed, use a <a href="m70_37.htm" onClick="suggestBack()">HAVING 
          clause</a> following a GROUP BY clause.</p>
        <p> When you use a summary function in a SELECT clause or a HAVING clause, 
          in some situations, PROC SQL must <a href="m70_38.htm" onClick="suggestBack()">remerge 
          data</a>. When PROC SQL remerges data, it makes two passes through the data, 
          and this requires additional processing time.</p>
        <p><strong>Subsetting Data by Using Subqueries</strong> <br>
          In the WHERE or the HAVING clause of a PROC SQL query, you can use a 
          <a href="m70_40.htm" onClick="suggestBack()">subquery</a> to subset 
          data. A subquery is a query that is nested in, and is part of, another 
          query. Subqueries can return values from a single row or multiple rows 
          to the outer query but can return values only from a single column.</p>
        <p><strong>Subsetting Data by Using Noncorrelated Subqueries</strong> 
          <br>
          <a href="m70_41.htm" onClick="suggestBack()">Noncorrelated subqueries</a> 
          execute independently of the outer query. You can use noncorrelated 
          subqueries that return a <a href="m70_41.htm" onClick="suggestBack()">single 
          value</a> or <a href="m70_43.htm" onClick="suggestBack()">multiple values. 
          </a>To further qualify a comparison specified in a WHERE or a HAVING 
          clause, you can use the conditional operators <a href="m70_47.htm" onClick="suggestBack()">ANY</a> 
          and <a href="m70_48.htm" onClick="suggestBack()">ALL</a> immediately 
          before a noncorrelated (or correlated) subquery.</p>
        <p><strong>Subsetting Data by Using Correlated Subqueries</strong> <br>
          <a href="m70_51.htm" onClick="suggestBack()">Correlated subqueries</a> 
          cannot be evaluated independently because their results are dependant 
          on the values returned by the outer query. In the WHERE or the HAVING 
          clause of an outer query, you can use the <a href="m70_54.htm" onClick="suggestBack()">EXISTS 
          and NOT EXISTS conditional operators</a> to test for the existence or 
          non-existence of a set of values returned by the subquery. </p>
        <p><strong>Validating Query Syntax</strong> <br>
          To check the validity of the query syntax without actually executing 
          the query, use the <a href="m70_57.htm" onClick="suggestBack()">NOEXEC option</a> or the <a href="m70_57.htm#validate" onClick="suggestBack()">VALIDATE keyword</a>.</p>
        <p><strong>Additional Features</strong> <br>
          PROC SQL supports <a href="m70_59.htm" onClick="suggestBack()">many 
          statements</a> in addition to the SELECT statement.</p></td>
  </tr>
</table>
<!-- InstanceEndEditable --> <br>
<table cellpadding=0 cellspacing=0 border=0 width="85%" align="center">
  <tr> 
    <td align="left"> 
      <hr>
    </td>
  </tr>
</table>

<P><!-- InstanceBeginEditable name="syntax" -->
  <TABLE cellpadding=0 cellspacing=0 border=0 width="85%" align="center">
    <TR> 
      <TD><h2><STRONG><A NAME="Syntax">Syntax</A></STRONG> </h2>
        <P> <EM>To go to the page where a statement or option was presented, select 
          a link.</EM>
      </TD>
    </TR>
  </TABLE>
  <br>
<P> 

  <TABLE CELLPADDING="2" align="center">
    <TR> 
      <TD><font color="#003399"><NOBR><STRONG>PROC SQL</STRONG> <A HREF="m70_5.htm" onClick="suggestBack()"
	      onMouseOver="window.status='Display details on the OUTOBS= option.'; "
	      onMouseOut="window.status=''"><strong>&lt;OUTOBS=&gt;</strong></A><STRONG>;</STRONG></NOBR></FONT></TD>
    </TR>
    <TR> 
      <TD><font color="#003399">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="m70_2.htm" onClick="suggestBack()"
	      onMouseOver="window.status='Display details on the SELECT statement.'; "
	      onMouseOut="window.status=''"><strong>SELECT</strong> <em>column-1&lt;, 
        . . . column-n</em>&gt;</A></font></TD>
    </TR>
    <TR> 
      <TD><font color="#003399">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="m70_2.htm" onClick="suggestBack()" onMouseOver="window.status='Display details on the SELECT statement.';" onMouseOut="window.status=''"><strong>FROM</strong> 
        <em>table-1 | view-1&lt;, . . . table-n | view-n&gt;</em></A></font></TD>
    </TR>
    <TR> 
      <TD><font color="#003399">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="m70_2.htm" onClick="suggestBack()" onMouseOver="window.status='Display details on the SELECT statement.';" onMouseOut="window.status=''">&lt;<strong>WHERE</strong> 
        <em>expression</em>&gt;</A></font></TD>
    </TR>
    <TR> 
      <TD><font color="#003399">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="m70_2.htm" onClick="suggestBack()" onMouseOver="window.status='Display details on the SELECT statement.';" onMouseOut="window.status=''">&lt;<strong>GROUP 
        BY </strong> <em>column-1&lt;, . . . column-n</em>&gt;&gt;</A></font></TD>
    </TR>
    <TR> 
      <TD><font color="#003399">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="m70_2.htm" onClick="suggestBack()" onMouseOver="window.status='Display details on the SELECT statement.';" onMouseOut="window.status=''">&lt;<strong>HAVING</strong> 
        <em>expression</em>&gt;</A></font></TD>
    </TR>
    <TR> 
      <TD><font color="#003399">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="m70_2.htm" onClick="suggestBack()" onMouseOver="window.status='Display details on the SELECT statement.';" onMouseOut="window.status=''">&lt;<strong>ORDER 
        BY</strong> <em>column-1&lt;, . . . column-n</em>&gt;<em>&gt;</em><strong>;</strong></A></font></TD>
    </TR>
    <TR> 
      <TD height="26"><strong><font color="#003399">QUIT</font></strong><font color="#003399">;</font></TD>
    </TR>
    <TR> 
      <TD height="26">&nbsp;</TD>
    </TR>
    <TR> 
      <TD height="26"><font color="#003399"><A HREF="m70_9.htm" onClick="suggestBack()" onMouseOver="window.status='Display details on the BETWEEN-AND operator.';" onMouseOut="window.status=''"><strong>BETWEEN</strong> 
        <em>value-1</em> <strong>AND</strong> <em>value-2</em></A></font></TD>
    </TR>
    <TR> 
      <TD height="26"><font color="#003399"><A HREF="m70_10.htm" onClick="suggestBack()" onMouseOver="window.status='Display details on the CONTAINS operator.';" onMouseOut="window.status=''"><em>sql-expression</em> 
        <strong>CONTAINS</strong> <em>sql-expression</em></A></font></TD>
    </TR>
    <TR> 
      <TD height="26"><font color="#003399"><A HREF="m70_11.htm" onClick="suggestBack()" onMouseOver="window.status='Display details on the IN operator.';" onMouseOut="window.status=''"><em>column</em> 
        <strong>IN</strong> <em>(constant-1 &lt;,...constant-n&gt;)</em></A></font></TD>
    </TR>
    <TR> 
      <TD height="26"><font color="#003399"><A HREF="m70_13.htm" onClick="suggestBack()" onMouseOver="window.status='Display details on the IS MISSING operator.';" onMouseOut="window.status=''"><em>column</em> 
        <strong>IS MISSING</strong></A></font></TD>
    </TR>
    <TR> 
      <TD height="26"><font color="#003399"><A HREF="m70_13.htm" onClick="suggestBack()" onMouseOver="window.status='Display details on the IS NULL operator.';" onMouseOut="window.status=''"><em>column</em> 
        <strong>IS NULL</strong></A></font></TD>
    </TR>
    <TR> 
      <TD height="26"><font color="#003399"><A HREF="m70_14.htm" onClick="suggestBack()" onMouseOver="window.status='Display details on the LIKE operator.';" onMouseOut="window.status=''"><em>column</em> 
        <strong>LIKE</strong> <em>'pattern'</em></A></font></TD>
    </TR>
    <TR>
      <TD height="26"><font color="#003399"><A HREF="m70_15.htm" onClick="suggestBack()" onMouseOver="window.status='Display details on the sounds-like (=*) operator.';" onMouseOut="window.status=''"><em>sql-expression</em> 
        <strong>=*</strong> <em>sql-expression</em></A></font></TD>
    </TR>
  </TABLE>
<br>
  <P> 
  <TABLE cellpadding=0 cellspacing=0 border=0 width="85%" align="center">
    <TR> 
      <TD align="left"> 
        <HR>
      </TD>
    </TR>
  </TABLE>
  <br>
<!-- InstanceEndEditable -->
<P> 
  <!-- InstanceBeginEditable name="sampleprogram" --> 
  <TABLE cellpadding=0 cellspacing=0 border=0 width="85%" align="center">
    <TR> 
      <TD align="left"><h2><STRONG><A NAME="Sample">Sample Programs</A></STRONG> 
        </h2>
        <blockquote> 
          <p><strong>Displaying all Columns in Output and an Expanded Column List 
            in the SAS Log</strong></p>
        </blockquote>
        <PRE><font color="#003399">     proc sql feedback;
        select *
           from sasuser.staffchanges;
     quit;</font></PRE>
        <blockquote> 
          <p><strong>Eliminating Duplicate Rows from Output</strong></p>
        </blockquote>
        <PRE><font color="#003399">     proc sql;<br>        select distinct flightnumber, destination<br>           from sasuser.internationalflights<br>           order by 1;
     quit;</font></PRE>
        <blockquote> 
          <p><strong>Subsetting Rows by Using Calculated Values</strong></p>
        </blockquote>
        <PRE><font color="#003399">     proc sql outobs=10;
        validate<br>        select flightnumber, 
               date label=&quot;Flight Date&quot;, destination,<br>               boarded + transferred + nonrevenue<br>               as Total<br>           from sasuser.marchflights<br>           where calculated total between 100 and 150;
     quit;</font></PRE> 
        <blockquote>
          <p><strong>Subsetting Data by Using a Noncorrelated Subquery</strong></p>
        </blockquote>
        <PRE><font color="#003399">     proc sql noexec;<br>        select jobcode, <br>               avg(salary) as AvgSalary
               format=dollar11.2<br>           from sasuser.payrollmaster<br>           group by jobcode<br>           having avg(salary) &gt;<br>              (select avg(salary)<br>                 from sasuser.payrollmaster);
     quit;</font></PRE> 
        <blockquote> 
          <p><strong>Subsetting Data by Using a Correlated Subquery</strong></p>
        </blockquote>
        <PRE><font color="#003399">     proc sql;
     title 'Frequent Flyers Who Are Not Employees';
        select count(*) as Count
           from sasuser.frequentflyers
           where not exists
              (select *
                 from sasuser.staffmaster
                 where name=
                       trim(lastname)||', '||firstname);
     quit;</font></PRE>
        <P> 
        <HR> </TD>
    </TR>
  </TABLE>
  <br>
  <!-- InstanceEndEditable --> 
<P>
  <!-- InstanceBeginEditable name="pointstoremember" --> 
  <TABLE cellpadding=0 cellspacing=0 border=0 width="85%" align="center">
    <TR> 
      <TD align="left"><h2><STRONG><A NAME="Points">Points to Remember</A></STRONG> 
        </h2>
        <UL>
          <LI> When you use summary functions, look for missing values. If a table 
            contains missing values, your results might not be what you expect. 
            Many summary functions ignore missing values when performing calculations, 
            and PROC SQL treats missing values in a column as a single group.<BR>
            <BR>
          <LI> When you create complex queries, it is helpful to use the NOEXEC 
            option or the VALIDATE statement to validate your query without executing 
            it.
        </UL>
      </TD>
    </TR>
  </TABLE>
  <br>
<!-- InstanceEndEditable --></center>
<script>writeNav_regular_bottom();</script>
</body>
<!-- InstanceEnd --></html>