<html><!-- InstanceBegin template="/Templates/informationObject.dwt" codeOutsideHTMLIsLocked="false" -->
<head>
<SCRIPT LANGUAGE="JavaScript" SRC="../tut.js"></SCRIPT>
<script language="JavaScript" src="../nav.js"></script>
<SCRIPT LANGUAGE="JavaScript">
 setPageTitle();
 setCookie();
  
// Drop down menu link- © Dynamic Drive (www.dynamicdrive.com)
// For full source code and 100's more DHTML scripts, visit http://www.dynamicdrive.com
// Credit MUST stay intact for use -->

</SCRIPT>

<!-- InstanceBeginEditable name="extrascript" -->
<SCRIPT LANGUAGE="JavaScript">
</SCRIPT>
<!-- InstanceEndEditable -->

<link rel="stylesheet" href="../tut.css">


<META http-equiv="Content-Type" content="text/html; charset=windows-1252">
</HEAD>

<body marginheight="0" marginwidth="0" topmargin="0" leftmargin="0" rightmargin="0" bgcolor="#FFFFF0">
<script>writeinformationObjectTopNav1();</script>
	  
	  <font color="#003399" size="3" face="Arial, Helvetica, sans-serif"><strong><!-- InstanceBeginEditable name="TopicTitle" -->Creating 
      a Random Sample with Replacement <!-- InstanceEndEditable --></strong></font> <!-- InstanceBeginEditable name="continued" --><!-- InstanceEndEditable -->
	  
<script>writeinformationObjectTopNav2();</script>
<br>
<center>
  <!-- InstanceBeginEditable name="content" -->
<table width="85%" border="0" cellpadding="0" cellspacing="0" align="center">
  <tr valign="top"> 
      <td><strong></strong> 
        <P>Another type of representative sample that you might want to create is 
        a <strong>random sample</strong>. A random sample contains observations 
        that are chosen from the original data set on a random basis. 
      <P>When you create a random sample<strong> with replacement</strong>, it 
        is possible for one observation to appear in the sample multiple times. 
        You can think of the original data set as a pool of possible observations 
        that may be chosen for inclusion in the sample. For each observation in 
        the sample data set, SAS chooses an observation randomly from the original 
        pool, copies it to the sample data set, then replaces it in the pool.<P><BR>
        <h2>Using the RANUNI Function</h2>
        <p>In order to create a random sample, you need to generate a random number. 
          SAS provides several random number functions to generate random numbers 
          from various distributions. One example of a random number function 
          is the RANUNI function. </td>
  </tr>
</table><P><BR>
<table align="center" border="1" cellspacing="0" cellpadding="10" width="85%" bgcolor="#F7F7DE" title="General form, RANUNI function">
            <tr> 
              <td align="left"><strong>General form, RANUNI function:</strong> <blockquote> <font color="#003399"><nobr><strong>RANUNI
                  </strong><em>(seed)</em></nobr></font> 
                </blockquote>
				where <font color="#003399"><em>seed</em></font> is a nonnegative 
      integer with a value less than 2<sup>31</sup>-1 (2,147,483,647). </td>
            </tr>
          </table>
<P><BR>
<table width="85%" border="0" cellpadding="0" cellspacing="0" align="center">
  <tr valign="top"> 
    <td><p>The RANUNI function generates streams of random numbers from an initial 
          starting point, called the <strong>seed</strong>. If you use a positive 
          seed, you can always replicate the stream of random numbers by using 
          the same DATA step. If you use zero as the seed, the computer clock 
          initializes the stream, and the stream of random numbers is not replicable. 
        <p>The numbers that the RANUNI function returns are all between 0 and 
          1 (noninclusive). Examples of the type of number RANUNI returns include 
          .01253689 and .95196500. If you use RANUNI in a DATA step that generates 
          only one random number, RANUNI returns only the first number from the 
          stream. If you use RANUNI in a DATA step that generates multiple numbers, 
          such as in a DO loop, RANUNI will return a different random number each 
          time the loop iterates. 
        <p>Let's take a look at some examples.</td>
  </tr>
</table><P><BR>
<!-- InstanceEndEditable --> 
</center>
<script>writeNav_regular_bottom();</script>
</body>
<!-- InstanceEnd --></html>
