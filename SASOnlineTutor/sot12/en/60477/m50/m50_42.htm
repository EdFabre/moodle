<html><!-- InstanceBegin template="/Templates/informationObject.dwt" codeOutsideHTMLIsLocked="false" -->
<head>
<SCRIPT LANGUAGE="JavaScript" SRC="../tut.js"></SCRIPT>
<script language="JavaScript" src="../nav.js"></script>
<SCRIPT LANGUAGE="JavaScript">
 setPageTitle();
 setCookie();
  
// Drop down menu link- © Dynamic Drive (www.dynamicdrive.com)
// For full source code and 100's more DHTML scripts, visit http://www.dynamicdrive.com
// Credit MUST stay intact for use -->

</SCRIPT>

<!-- InstanceBeginEditable name="extrascript" --> 
<SCRIPT LANGUAGE="JavaScript">
</SCRIPT>
<!-- InstanceEndEditable -->

<link rel="stylesheet" href="../tut.css">


<META http-equiv="Content-Type" content="text/html; charset=windows-1252">
</HEAD>

<body marginheight="0" marginwidth="0" topmargin="0" leftmargin="0" rightmargin="0" bgcolor="#FFFFF0">
<script>writeinformationObjectTopNav1();</script>
	  
	  <font color="#003399" size="3" face="Arial, Helvetica, sans-serif"><strong><!-- InstanceBeginEditable name="TopicTitle" -->Using 
      Macro Functions to Manipulate Character Strings<!-- InstanceEndEditable --></strong></font> <!-- InstanceBeginEditable name="continued" --><font color="#003399" size="3" face="Arial, Helvetica, sans-serif">(continued)</font><!-- InstanceEndEditable -->
	  
<script>writeinformationObjectTopNav2();</script>
<br>
<center>
  <!-- InstanceBeginEditable name="content" --> 
<table cellpadding="2" width="85%" align="center">
        <tr valign="Top"> 
             
      <td>
        <h2>The %QSUBSTR Function</h2>
If the argument contains a special character, a mnemonic operator, or a macro 
        trigger, you will need to use the <nobr>%QSUBSTR function</nobr>. <nobr>%QSUBSTR</nobr> 
        has the same syntax as the <nobr>%SUBSTR</nobr> function, and it works 
        the same as <nobr>%SUBSTR</nobr> except that it also masks mnemonic operators 
        and special characters (including macro triggers). 
        <P><BR>
<h2>Example</h2>
These statements show the results produced by <nobr>%SUBSTR</nobr> and <nobr>%QSUBSTR</nobr>: 
<font color="#003399"> 
        <pre>     %let a=one;
     %let b=two;
     %let c=%nrstr(&a &b);

     %put C: &c;
     %put With SUBSTR: %substr(&c,1,2);
     %put With QSUBSTR: %qsubstr(&c,1,2);
</pre>
        </font> Executing these statements produces the following messages in 
        the SAS log. As you can see, the first <nobr>%PUT<nobr> statement shows that <code>&amp;c</code> 
        resolves to the value <em>&amp;a &amp;b</em>. In the second <nobr>%PUT</nobr> statement, 
        the <nobr>%SUBSTR</nobr> function extracts the value <em>&amp;a</em> from the resolved 
        value of the macro variable reference <code>&amp;c</code>, and resolves 
        <code>&amp;a</code> to <em>one</em>. The third <nobr>%PUT</nobr> statement shows that 
        the <nobr>%QSUBSTR</nobr> function prevents the value <em>&amp;a</em> from being resolved 
        further. 
        <P><BR>
 <div align="center">
SAS Log
<table border="1" cellspacing="0" cellpadding="10" title="SAS log" bgcolor="#F7F7DE">
<tr><td><pre>
11   %let a=one;
12   %let b=two;
13   %let c=%nrstr(&a &b);
14
15   %put C: &c;
C: &a &b
16   %put With SUBSTR: %substr(&c,1,2);
<strong>With SUBSTR: one</strong>
17   %put With QSUBSTR: %qsubstr(&c,1,2);
<strong>With QSUBSTR: &a</strong>
</pre></td></tr>
</table> </div>

</td>
        </tr>
      </table><P><BR>
<!-- InstanceEndEditable --> 
</center>
<script>writeNav_regular_bottom();</script>
</body>
<!-- InstanceEnd --></html>
