<html><!-- InstanceBegin template="/Templates/informationObject.dwt" codeOutsideHTMLIsLocked="false" -->
<head>
<SCRIPT LANGUAGE="JavaScript" SRC="../tut.js"></SCRIPT>
<script language="JavaScript" src="../nav.js"></script>
<SCRIPT LANGUAGE="JavaScript">
 setPageTitle();
 setCookie();
  
// Drop down menu link- © Dynamic Drive (www.dynamicdrive.com)
// For full source code and 100's more DHTML scripts, visit http://www.dynamicdrive.com
// Credit MUST stay intact for use -->

</SCRIPT>

<!-- InstanceBeginEditable name="extrascript" --> 
<SCRIPT LANGUAGE="JavaScript">
</SCRIPT>
<!-- InstanceEndEditable -->

<link rel="stylesheet" href="../tut.css">


<META http-equiv="Content-Type" content="text/html; charset=windows-1252">
</HEAD>

<body marginheight="0" marginwidth="0" topmargin="0" leftmargin="0" rightmargin="0" bgcolor="#FFFFF0">
<script>writeinformationObjectTopNav1();</script>
	  
	  <font color="#003399" size="3" face="Arial, Helvetica, sans-serif"><strong><!-- InstanceBeginEditable name="TopicTitle" -->Processing 
      Macro Variables<!-- InstanceEndEditable --></strong></font> <!-- InstanceBeginEditable name="continued" --><font color="#003399" size="3" face="Arial, Helvetica, sans-serif">(continued)</font><!-- InstanceEndEditable -->
	  
<script>writeinformationObjectTopNav2();</script>
<br>
<center>
  <!-- InstanceBeginEditable name="content" --> 
<table width="85%" border="0" cellpadding="0" cellspacing="0" align="center">
  <tr valign="top"> 
    <td>
<h2>Tokenization</h2>
Between the input stack and the compiler, SAS programs are <strong>tokenized</strong> into smaller pieces. 
A component of SAS known as the <strong>word scanner</strong> divides program text into fundamental units called <strong>tokens</strong>.
<UL>
<LI>Tokens are passed on demand to the compiler.</LI>
<LI>The compiler requests tokens until it receives a semicolon.</LI>
<LI>The compiler performs a syntax check on the statement.</LI>
</UL><P><BR>
<center>
          <img src="images/table3a.gif" width="135" height="319" alt="tokenization"> 
        </center>

      <P> <BR>SAS stops sending statements to the compiler when it reaches a <strong>step 
        boundary</strong>. Examples of step boundaries include a RUN statement (<code><font color="#003399">run;</font></code>) or 
        the beginning of a new DATA or PROC step. Once the entire step has been 
        compiled, it is executed. 
     
    </td>
  </tr>
</table><BR><BR>
<!-- InstanceEndEditable --> 
</center>
<script>writeNav_regular_bottom();</script>
</body>
<!-- InstanceEnd --></html>
