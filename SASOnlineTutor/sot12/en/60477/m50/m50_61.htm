<html><!-- InstanceBegin template="/Templates/summary.dwt" codeOutsideHTMLIsLocked="false" -->
<head>

<SCRIPT LANGUAGE="JavaScript" SRC="../tut.js"></SCRIPT>
<script language="JavaScript1.2" src="../nav.js"></script>


<SCRIPT LANGUAGE="JavaScript">
 setPageTitle();
 setCookie();
 
// Drop down menu link- © Dynamic Drive (www.dynamicdrive.com)
// For full source code and 100's more DHTML scripts, visit http://www.dynamicdrive.com
// Credit MUST stay intact for use -->

</SCRIPT>

<!-- InstanceBeginEditable name="extrascript" --> 
<SCRIPT LANGUAGE="JavaScript">
</SCRIPT>
<!-- InstanceEndEditable -->

<link rel="stylesheet" href="../tut.css">

<META http-equiv="Content-Type" content="text/html; charset=windows-1252">
</HEAD>

<body marginheight="0" marginwidth="0" topmargin="0" leftmargin="0" rightmargin="0" bgcolor="#FFFFF0">
<script>writeinformationObjectTopNav1();</script>
 
      <font color="#003399" size="3" face="Arial, Helvetica, sans-serif"><strong><script>document.write(summaryTitle)</script></strong></font>
 
 
<script>writeinformationObjectTopNav2();</script>
<br>
<center><TABLE cellpadding=0 cellspacing=0 border=0 width="85%" align="center">
  <TR>
      <TD align="left">
      
      <p><script>document.write(summaryPageContains)</script></p>
     <ul><!-- InstanceBeginEditable name="links" --> 
        <LI> <A HREF="#Text" onMouseOver="window.status='Go to the text summary section.'; "
		onMouseOut="window.status=''">a text summary of the material taught in 
          the lesson</A> 
        <LI> <A HREF="#Syntax" onMouseOver="window.status='Go to the syntax section.'; "
		onMouseOut="window.status=''">syntax for&nbsp;statements and options</A> 
        <LI> <A HREF="#Sample" onMouseOver="window.status='Go to the sample program section.'; "
		onMouseOut="window.status=''">sample programs</A> 
        <LI> <A HREF="#Points" onMouseOver="window.status='Go to the points to remember section.'; "
		onMouseOut="window.status=''">points to remember</A>. 
        <!-- InstanceEndEditable --></ul>
<P>
	  <HR>
      </TD>
    </TR>
  </TABLE>
  <P>

<!-- InstanceBeginEditable name="textsummaryintro" -->     
<TABLE cellpadding=0 cellspacing=0 border=0 width="85%" align="center">
  <TR>
	<TD align="left"><h2><STRONG><A NAME="Text"><script>document.write(summaryPageTextSummaryTitle);</script></A></STRONG> </h2>
      <P>
	  <EM><script>document.write(summaryPageDirections);</script></EM></TD>
      </TR>
    </TABLE>
<!-- InstanceEndEditable -->
  <br>
<!-- InstanceBeginEditable name="textsummary" --> 
<table width="85%" border="0" cellpadding="0" cellspacing="0" align="center">
  <tr valign="top"> 
    <td> 
      <p><strong>Basic Concepts</strong> <br>
        <a href="m50_3.htm" onClick="suggestBack()"  onMouseOver="window.status='Display details on macro variables.';" onMouseOut="window.status=''">Macro variables</a> can supply a variety of information, 
	from operating system 
        information, to SAS session information, to any text string that you define. 
        Updating multiple references to a variable, data set, or text string is a 
        simple process if you use macro variables in your programs. Macro variables 
        are part of the <a href="m50_3.htm" onClick="suggestBack()" onMouseOver="window.status='Display details on the SAS macro facility.';" onMouseOut="window.status=''">SAS macro facility</a>, which is a tool for 
	extending and 
        customizing SAS and for reducing the amount of text you must 
        enter in order to perform common tasks. 
        <P>Values of macro variables are stored in <a href="m50_3.htm" onClick="suggestBack()" onMouseOver="window.status='Display details on symbol tables.';" onMouseOut="window.status=''">symbol 
          tables</a>. Values that are stored in the global symbol table are always 
          available. In order to substitute the value of a macro variable in your 
          program, you must <a href="m50_6.htm" onClick="suggestBack()" onMouseOver="window.status='Display details on referencing a macro variable.';" onMouseOut="window.status=''">reference</a> 
          that macro variable by preceding the macro variable name with an ampersand. 
          You can reference a macro variable anywhere in a SAS program except 
          within data lines. 
        <p><strong>Using Automatic Macro Variables</strong> <br>
        SAS provides <a href="m50_9.htm" onClick="suggestBack()" onMouseOver="window.status='Display details on automatic macro variables.';" onMouseOut="window.status=''">automatic macro variables</a> that contain 
	information about your computing environment. Automatic macro variables are created when SAS is invoked. 
	Many of these variables have fixed values that are assigned by SAS and which remain constant for the 
	duration of your SAS session. Others have values that are updated automatically based on submitted SAS statements.
		<P><strong>Using User-Defined Macro Variables</strong><br>
	You can create and define your own macro variables with the <a href="m50_13.htm" onClick="suggestBack()" onMouseOver="window.status='Display details on the %LET statement.';" onMouseOut="window.status=''"><nobr>%LET</nobr> statement</a>.
	The <nobr>%LET</nobr> statement enables you to assign a value for your new macro variable and to store that value in the global symbol table.
	Macro variable values are <a href="m50_14.htm" onClick="suggestBack()" onMouseOver="window.status='Display details on character strings as values.';" onMouseOut="window.status=''">character strings</a>; 
	except for leading and trailing blanks, values are stored exactly as they appear
	in the assignment statement.
		<p><strong>Processing Macro Variables</strong> <br>
       When submitted, a SAS program goes to an area of memory called the 
	<a href="m50_19.htm" onClick="suggestBack()" onMouseOver="window.status='Display details on the input stack.';" onMouseOut="window.status=''">input stack</a>. 
	From there, the <a href="m50_20.htm" onClick="suggestBack()" onMouseOver="window.status='Display details on the word scanner.';" onMouseOut="window.status=''">word scanner</a> divides the 
	program into small chunks called tokens and passes them to the appropriate compiler for eventual execution. 
	Certain token sequences are <a href="m50_24.htm" onClick="suggestBack()" onMouseOver="window.status='Display details on macro triggers.';" onMouseOut="window.status=''">macro triggers</a>, 
	which are sent to the macro processor for resolution. 
	Once a macro variable has been resolved by the macro processor, the stored value is substituted back into 
	the program in the input stack, and word scanning continues. 
		<p><strong>Displaying Macro Variable Values in the SAS Log</strong> <br>
        You can use the <a href="m50_27.htm" onClick="suggestBack()" onMouseOver="window.status='Display details on the SYMBOLGEN option.';" onMouseOut="window.status=''">SYMBOLGEN</a> system option
	to monitor the value that is substituted for a macro variable reference. 
	You can also use the <a href="m50_28.htm" onClick="suggestBack()" onMouseOver="window.status='Display details on the %PUT statement.';" onMouseOut="window.status=''"><nobr>%PUT</nobr> statement</a>
	to write messages, which can include macro variable values, to the SAS log.
		<P><strong>Using Macro Functions to Mask Special Characters</strong><br>
          The <a href="m50_32.htm" onClick="suggestBack()" onMouseOver="window.status='Display details on the %STR function.';" onMouseOut="window.status=''"><nobr>%STR</nobr> 
          function</a> enables you to quote tokens in order to mask them from 
          the macro processor. The <a href="m50_35.htm" onClick="suggestBack()" onMouseOver="window.status='Display details on the %NRSTR function.';" onMouseOut="window.status=''"><nobr>%NRSTR</nobr> 
          function</a> enables you to quote tokens that include macro triggers 
          from the macro processor. 
        <P><strong>Using Macro Functions to Manipulate Character Strings</strong><br>
          You can use <a href="m50_37.htm" onClick="suggestBack()" onMouseOver="window.status='Display details on macro character functions.';" onMouseOut="window.status=''">macro 
          character functions</a> to apply character string manipulations to the 
          values of macro variables. The <a href="m50_38.htm" onClick="suggestBack()" onMouseOver="window.status='Display details on the %UPCASE function.';" onMouseOut="window.status=''"><nobr>%UPCASE</nobr> 
          function</a> enables you to change values from lowercase to uppercase. 
          The <a href="m50_39.htm" onClick="suggestBack()" onMouseOver="window.status='Display details on the %QUPCASE function.';" onMouseOut="window.status=''"><nobr>%QUPCASE</nobr> 
          function</a> works the same as <nobr>%UPCASE</nobr> except that it also masks special 
          characters and mnemonic operators. The <a href="m50_41.htm" onClick="suggestBack()" onMouseOver="window.status='Display details on the %SUBSTR function.';" onMouseOut="window.status=''"><nobr>%SUBSTR</nobr> 
          function</a> enables you to extract part of a string from a macro variable 
          value. The <a href="m50_42.htm" onClick="suggestBack()" onMouseOver="window.status='Display details on the %QSUBSTR function.';" onMouseOut="window.status=''"><nobr>%QSUBSTR</nobr> 
          function</a> works the same as <nobr>%SUBSTR</nobr> except that it also masks special 
          characters and mnemonic operators. The <a href="m50_43.htm" onClick="suggestBack()" onMouseOver="window.status='Display details on the %INDEX function.';" onMouseOut="window.status=''"><nobr>%INDEX</nobr> 
          function</a> enables you to determine the location of the first character 
          of a character string within a source. Using the <a href="m50_45.htm" onClick="suggestBack()" onMouseOver="window.status='Display details on the %SCAN function.';" onMouseOut="window.status=''"><nobr>%SCAN</nobr> 
          function</a>, you can extract words from the value of a macro variable. 
          The <a href="m50_46.htm" onClick="suggestBack()" onMouseOver="window.status='Display details on the %QSCAN function.';" onMouseOut="window.status=''"><nobr>%QSCAN</nobr> 
          function</a> works the same as <nobr>%SCAN</nobr> except that it also masks special 
          characters and mnemonic operators. 
        <P><strong>Using SAS Functions with Macro Variables</strong><br>
	You can use the <a href="m50_49.htm" onClick="suggestBack()" onMouseOver="window.status='Display details on the %SYSFUNC function.';" onMouseOut="window.status=''"><nobr>%SYSFUNC</nobr> function</a> to 
	execute other SAS functions. The <a href="m50_50.htm"  onClick="suggestBack()" onMouseOver="window.status='Display details on the %QSYSFUNC function.';" onMouseOut="window.status=''"><nobr>%QSYSFUNC</nobr> function</a> works the same as the 
	<nobr>%SYSFUNC</nobr> function except that it also masks special characters and mnemonic operators.
		<P><strong>Combining Macro Variable References with Text</strong><br>
	You might sometimes need to combine a macro variable reference with other text. 
	You can place text <a href="m50_52.htm" onClick="suggestBack()" onMouseOver="window.status='Display details on combining macro variable references with text.';" onMouseOut="window.status=''">immediately before</a>
	 or <a href="m50_55.htm" onClick="suggestBack()" onMouseOver="window.status='Display details on combining macro variable references with text.';" onMouseOut="window.status=''">immediately after</a> a macro variable reference. You can also 
	<a href="m50_52.htm" onClick="suggestBack()" onMouseOver="window.status='Display details on combining macro variable references with text.';" onMouseOut="window.status=''">combine two</a> macro variable references in order to create a new token. 
	You might need to use a <a href="m50_56.htm" onClick="suggestBack()" onMouseOver="window.status='Display details on delimiters in macro variable references.';" onMouseOut="window.status=''">delimiter</a> when you combine macro variable references with text.
		
	
    </td>
  </tr>
</table>
<!-- InstanceEndEditable --> <br>
<table cellpadding=0 cellspacing=0 border=0 width="85%" align="center">
  <tr> 
    <td align="left"> 
      <hr>
    </td>
  </tr>
</table>

<P><!-- InstanceBeginEditable name="syntax" --> 
<center>
  <TABLE cellpadding=0 cellspacing=0 border=0 width="85%">
    <TR> 
      <TD><STRONG><A NAME="Syntax">Syntax</A></STRONG> 
        <P> <EM>To go to the page where a statement or option was presented, select 
          a link.</EM> 
      </TD>
    </TR>
  </TABLE>
  <br>
</center>
<P align="center"> 
<TABLE CELLPADDING="2" width="85%">
  <TR> 
    <TD><blockquote><FONT color="#003399"><A HREF="m50_27.htm" onClick="suggestBack()" onMouseOver="window.status='Display details on the SYMBOLGEN OPTION.'; "
	      onMouseOut="window.status=''"><STRONG>OPTIONS</STRONG> <strong>NOSYMBOLGEN | SYMBOLGEN;</strong></A></FONT></blockquote></TD>
  </TR>
  <TR> 
    <TD><blockquote><FONT color="#003399"><NOBR><A HREF="m50_28.htm" onClick="suggestBack()"
	      onMouseOver="window.status='Display details on the %PUT statement.'; "
	      onMouseOut="window.status=''"><STRONG>%PUT</STRONG> <EM>text</EM> 
      <STRONG>;</STRONG></A></NOBR></FONT></blockquote></TD>
  </TR>
  <TR> 
    <TD><blockquote><FONT color="#003399"><A HREF="m50_13.htm" onClick="suggestBack()" onMouseOver="window.status='Display details on the %LET statement.'; "
	      onMouseOut="window.status=''"><STRONG>%LET</STRONG> <EM>variable=value</EM><STRONG>;</STRONG></A></FONT></blockquote></TD>
  </TR>
<TR> 
    <TD><blockquote><FONT color="#003399"><A HREF="m50_32.htm" onClick="suggestBack()" onMouseOver="window.status='Display details on the %STR function.';" onMouseOut="window.status=''">
    <STRONG>%STR</STRONG> (<EM>argument</EM>)</A></FONT></blockquote></TD>
  </TR>
<TR> 
    <TD><blockquote><FONT color="#003399"><A HREF="m50_35.htm" onClick="suggestBack()" onMouseOver="window.status='Display details on the %STR function.';" onMouseOut="window.status=''">
    <STRONG>%NRSTR</STRONG> (<EM>argument</EM>)</A></FONT></blockquote></TD>
  </TR>
  <TR> 
    <TD><blockquote><FONT color="#003399"><A HREF="m50_38.htm" onClick="suggestBack()" onMouseOver="window.status='Display details on the %UPCASE function.';" onMouseOut="window.status=''">
    <STRONG>%UPCASE</STRONG> (<EM>argument</EM>)</A></FONT></blockquote></TD>
  </TR>
 <TR> 
    <TD><blockquote><FONT color="#003399"><A HREF="m50_39.htm" onClick="suggestBack()" onMouseOver="window.status='Display details on the %QUPCASE function.';" onMouseOut="window.status=''">
    <STRONG>%QUPCASE</STRONG> (<EM>argument</EM>)</A></FONT></blockquote></TD>
  </TR>
 <TR> 
    <TD><blockquote><FONT color="#003399"><A HREF="m50_41.htm" onClick="suggestBack()" onMouseOver="window.status='Display details on the %SUBSTR function.';" onMouseOut="window.status=''">
    <STRONG>%SUBSTR</STRONG> (<EM>argument, position <,n></EM>)</A></FONT></blockquote></TD>
  </TR>
 <TR> 
    <TD><blockquote><FONT color="#003399"><A HREF="m50_42.htm" onClick="suggestBack()" onMouseOver="window.status='Display details on the %QSUBSTR function.';" onMouseOut="window.status=''">
    <STRONG>%QSUBSTR</STRONG> (<EM>argument, position <,n></EM>)</A></FONT></blockquote></TD>
  </TR>
  <TR> 
    <TD><blockquote><FONT color="#003399"><A HREF="m50_43.htm" onClick="suggestBack()" onMouseOver="window.status='Display details on the %INDEX function.';" onMouseOut="window.status=''">
    <STRONG>%INDEX</STRONG> (<EM>source,string</EM>)</A></FONT></blockquote></TD>
  </TR>
 <TR> 
    <TD><blockquote><FONT color="#003399"><A HREF="m50_45.htm" onClick="suggestBack()" onMouseOver="window.status='Display details on the %SCAN function.';" onMouseOut="window.status=''">
    <STRONG>%SCAN</STRONG> (<EM>argument, n <,delimiters></EM>)</A></FONT></blockquote></TD>
  </TR>
<TR> 
    <TD><blockquote><FONT color="#003399"><A HREF="m50_46.htm" onClick="suggestBack()" onMouseOver="window.status='Display details on the %QSCAN function.';" onMouseOut="window.status=''">
    <STRONG>%QSCAN</STRONG> (<EM>argument, n <,delimiters></EM>)</A></FONT></blockquote></TD>
  </TR>
 
 <TR> 
    <TD><blockquote><FONT color="#003399"><A HREF="m50_49.htm" onClick="suggestBack()" onMouseOver="window.status='Display details on the %SYSFUNC function.';" onMouseOut="window.status=''">
    <STRONG>%SYSFUNC</STRONG> (<EM>function</EM>(<EM>argument(s)</EM>)<,<EM>format</EM>>)</A></FONT></blockquote></TD>
  </TR>
 <TR> 
    <TD><blockquote><FONT color="#003399"><A HREF="m50_50.htm" onClick="suggestBack()" onMouseOver="window.status='Display details on the %QSYSFUNC function.';" onMouseOut="window.status=''">
    <STRONG>%QSYSFUNC</STRONG> (<EM>function</EM>(<EM>argument(s)</EM>)<,<EM>format</EM>>)</A></FONT></blockquote></TD>
  </TR>
  
</TABLE>
<P align="center"> 
<center>
  <TABLE cellpadding=0 cellspacing=0 border=0 width="85%">
    <TR> 
      <TD align="left"> 
        <HR>
      </TD>
    </TR>
  </TABLE>
  <br>
</center>
<!-- InstanceEndEditable -->
<P> 
  <!-- InstanceBeginEditable name="sampleprogram" --> 
  <TABLE cellpadding=0 cellspacing=0 border=0 width="85%" align="center">
    <TR> 
      <TD align="left"><STRONG><A NAME="Sample">Sample Programs</A></STRONG> 
      <P><BR><blockquote><strong>Creating Macro Variables with a %LET Statement</strong></blockquote>  <PRE><font color="#003399">     options symbolgen; </font>
<font color="#003399">     %let year=2002;</font>
<font color="#003399">     proc print data=sasuser.schedule;</font>
<font color="#003399">        where year(begin_date)=&year;</font>
<font color="#003399">        title "Scheduled Classes for &year";</font>
<font color="#003399">     run;</font>
<font color="#003399">     proc means data=sasuser.all sum;</font>
<font color="#003399">        where year(begin_date)=&year;</font>
<font color="#003399">        class location;</font>
<font color="#003399">        var fee;</font>
<font color="#003399">        title1 "Total Fees for &year Classes";</font>
<font color="#003399">        title2 "by Training Center";</font>
<font color="#003399">     run;</font>
</PRE>
        <P><blockquote><strong>Using Automatic Macro Variables</strong></blockquote> 
<PRE><font color="#003399">     footnote1 &quot;Created &amp;systime &amp;sysday, &amp;sysdate9&quot;;
     footnote2 &quot;on the &amp;sysscp system using Release &amp;sysver&quot;;
     title &quot;REVENUES FOR DALLAS TRAINING CENTER&quot;;
     proc tabulate data=sasuser.all(keep=location course_title fee);
        where upcase(location)=&quot;DALLAS&quot;;
              class course_title;
              var fee;
              table course_title=&quot; &quot; all=&quot;TOTALS&quot;,
                    fee=&quot; &quot;*(n*f=3. sum*f=dollar10.)
                    / rts=30 box=&quot;COURSE&quot;;
     run;
</font></PRE>

<P><blockquote><strong>Inserting Macro Variables Immediately After Text</strong> </blockquote>
        <PRE><font color="#003399">     %let year=02;
     %let month=jan;
     proc chart data=sasuser.y&amp;year&amp;month;
        hbar week / sumvar=sale;
     run;
     proc plot data=sasuser.y&amp;year&amp;month;
       plot sale*day;
     run;
</font></PRE>
<P><blockquote><strong>Inserting Macro Variables Immediately Before Text</strong> </blockquote>
        <PRE><font color="#003399">     %let graphics=g;
     %let year=02;
     %let month=jan;
     %let var=sale;
     proc &amp;graphics.chart data=sasuser.y&amp;year&amp;month;
        hbar week / sumvar=&amp;var;
     run;
     proc &amp;graphics.plot data=sasuser.y&amp;year&amp;month;
        plot &amp;var*day;
     run;
</font></PRE><P>
        <HR>
      </TD>
    </TR>
  </TABLE>
  <br>
  <!-- InstanceEndEditable --> 
<P>
  <!-- InstanceBeginEditable name="pointstoremember" --> 
  <TABLE cellpadding=0 cellspacing=0 border=0 width="85%">
    <TR> 
      <TD align="left"><STRONG><A NAME="Points">Points to Remember</A></STRONG> 
        <UL>
          <LI> Macro variables can make your programs more reusable and dynamic.<BR>
            <BR>
          <LI> When you submit code to SAS, macro variable references are resolved by the macro processor, 
	and their values are substituted into your program.<BR>
            <BR>
          <LI>You can use the <nobr>%PUT</nobr> statement to write any text, including resolved macro variables, to the SAS log.<br> 
           <br>
	<LI> If you reference a macro variable within quotation marks, you must use double quotation marks. Macro variable
	references that are enclosed in single quotation marks will not be resolved.<br>
	<br>
	<LI> Most macro character functions have corresponding functions (such as <nobr>%QSUBSTR</nobr> and <nobr>%QSCAN</nobr>) that also 
	mask special characters and mnemonic operators. 
        </UL>
      </TD>
    </TR>
  </TABLE>
  <!-- InstanceEndEditable --></center>
<script>writeNav_regular_bottom();</script>
</body>
<!-- InstanceEnd --></html>