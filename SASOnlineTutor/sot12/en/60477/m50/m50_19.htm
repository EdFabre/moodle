<html><!-- InstanceBegin template="/Templates/informationObject.dwt" codeOutsideHTMLIsLocked="false" -->
<head>
<SCRIPT LANGUAGE="JavaScript" SRC="../tut.js"></SCRIPT>
<script language="JavaScript" src="../nav.js"></script>
<SCRIPT LANGUAGE="JavaScript">
 setPageTitle();
 setCookie();
  
// Drop down menu link- © Dynamic Drive (www.dynamicdrive.com)
// For full source code and 100's more DHTML scripts, visit http://www.dynamicdrive.com
// Credit MUST stay intact for use -->

</SCRIPT>

<!-- InstanceBeginEditable name="extrascript" --> 
<SCRIPT LANGUAGE="JavaScript">
</SCRIPT>
<!-- InstanceEndEditable -->

<link rel="stylesheet" href="../tut.css">


<META http-equiv="Content-Type" content="text/html; charset=windows-1252">
</HEAD>

<body marginheight="0" marginwidth="0" topmargin="0" leftmargin="0" rightmargin="0" bgcolor="#FFFFF0">
<script>writeinformationObjectTopNav1();</script>
	  
	  <font color="#003399" size="3" face="Arial, Helvetica, sans-serif"><strong><!-- InstanceBeginEditable name="TopicTitle" -->Processing 
      Macro Variables<!-- InstanceEndEditable --></strong></font> <!-- InstanceBeginEditable name="continued" --><!-- InstanceEndEditable -->
	  
<script>writeinformationObjectTopNav2();</script>
<br>
<center>
  <!-- InstanceBeginEditable name="content" --> 
<table width="85%" border="0" cellpadding="0" cellspacing="0" align="center">
  <tr valign="top"> 
    <td>
<h2>SAS Processing</h2>
	You have seen how to create and reference macro variables. In order to work 
        with macro variables in the programs that you write, you need to understand 
        how macro variables are processed and stored. First, it is important that 
        you understand how SAS processing works. 
        <P>
A SAS program can be any combination of
<UL>
<LI>DATA steps and PROC steps</LI>
<LI>global statements</LI>
<LI>SAS Component Language (SCL) code</LI>
<LI>Structured Query Language (SQL) code</LI>
<LI>SAS macro language code.</LI>
</UL>
When you submit a program, it goes to an area of memory called the <strong>input 
        stack</strong>. This is true for all code that you submit, such as a DATA 
        step, SCL code, or SQL code. 
        <P><BR><center>
          <img src="images/table1a.gif" width="350" height="264" alt="input stack"> 
        </center>
<P><BR>
Once SAS code is in the input stack, SAS 
<UL>
          <LI>reads the text in the input stack (left-to-right, top-to-bottom)</LI>
          <LI>routes text to the appropriate compiler upon demand</LI>
          <LI>suspends this activity when a step boundary such as a RUN statement is reached</LI>
          <LI>executes the compiled code if there are no compilation errors</LI>
          <LI>repeats this process for any subsequent steps.</LI>
</UL><P><BR>
<center>
          <img src="images/table2a.gif" alt="compiling from the input stack" width="135" height="201"> 
        </center>
<P><BR>
Let's take a closer look. 
    </td>
  </tr>
</table><P><BR>
<!-- InstanceEndEditable --> 
</center>
<script>writeNav_regular_bottom();</script>
</body>
<!-- InstanceEnd --></html>
