<html><!-- InstanceBegin template="/Templates/informationObject.dwt" codeOutsideHTMLIsLocked="false" -->
<head>
<SCRIPT LANGUAGE="JavaScript" SRC="../tut.js"></SCRIPT>
<script language="JavaScript" src="../nav.js"></script>
<SCRIPT LANGUAGE="JavaScript">
 setPageTitle();
 setCookie();
  
// Drop down menu link- © Dynamic Drive (www.dynamicdrive.com)
// For full source code and 100's more DHTML scripts, visit http://www.dynamicdrive.com
// Credit MUST stay intact for use -->

</SCRIPT>

<!-- InstanceBeginEditable name="extrascript" --> 
<SCRIPT LANGUAGE="JavaScript">
</SCRIPT>
<!-- InstanceEndEditable -->

<link rel="stylesheet" href="../tut.css">


<META http-equiv="Content-Type" content="text/html; charset=windows-1252">
</HEAD>

<body marginheight="0" marginwidth="0" topmargin="0" leftmargin="0" rightmargin="0" bgcolor="#FFFFF0">
<script>writeinformationObjectTopNav1();</script>
	  
	  <font color="#003399" size="3" face="Arial, Helvetica, sans-serif"><strong><!-- InstanceBeginEditable name="TopicTitle" -->Testing 
      Your Programs<!-- InstanceEndEditable --></strong></font> <!-- InstanceBeginEditable name="continued" --><font color="#003399" size="3" face="Arial, Helvetica, sans-serif">(continued)</font><!-- InstanceEndEditable -->
	  
<script>writeinformationObjectTopNav2();</script>
<br>
<center>
  <!-- InstanceBeginEditable name="content" --> 
<table width="85%" border="0" cellpadding="0" cellspacing="0" align="center">
  <tr valign="top"> 
    <td>
<p><strong>Automatic Variables</strong> </p>
      <p> You can use a PUT statement to display the values of the automatic variables 
        <code>_N_</code> and <code>_ERROR_</code>. In some cases, knowing the 
        value of <code>_N_</code> can help you locate an observation in the data 
        set: 
      <pre>
<font color="#003399">        put 'MY NOTE: invalid value: '</font>
<font color="#003399">             <strong>code= _n_= _error_=</strong>;</font></pre>
    </td>
  </tr>
</table>
<center>
  SAS Log 
  <table bgcolor="#F7F7DE" border="1" cellpadding="10" cellspacing="0" title="SAS Log">
    <tr> 
      <td> 
        <pre>MY NOTE: invalid value: <span style="background:#CCCC99"><strong>Code=V N=4 ERROR=0</strong></span>
NOTE: The data set WORK.TEST has 9 observations
      and 6 variables.</pre>
      </td>
    </tr>
  </table>
  <p><br>
  <table cellpadding=0 cellspacing=0 border=0 width="85%">
    <tr> 
      <td>You can also use a PUT statement to write all variable names and variable 
        values, including automatic variables, to the log. Use the <code>_ALL_</code> 
        specification: 
        <pre>
<font color="#003399">        put 'MY NOTE: invalid value: ' <strong>_all_</strong> ;</font>
</pre>
      </td>
    </tr>
  </table>
  SAS Log 
  <table bgcolor="#F7F7DE" border="1" cellpadding="10" cellspacing="0" title="SAS Log">
    <tr> 
      <td> 
        <pre>MY NOTE: invalid value: <span style="background:#CCCC99"><strong>Account=101-3144</strong></span>
         <span style="background:#CCCC99"><strong>Amount=$3,500 Rate=10.50% Months=1</strong></span>
         <span style="background:#CCCC99"><strong>Code=V type=C</strong><strong> ERROR=0 N=4</strong></span>
NOTE: The data set WORK.TEST has 9 observations
      and 6 variables.</pre>
      </td>
    </tr>
  </table>
  <p> <br>
  <table cellpadding=0 cellspacing=0 border=0 width="85%">
    <tr> 
      <td><strong>Conditional Processing</strong> 
        <p> You can use a PUT statement with conditional processing (that is, 
          with IF-THEN/ELSE statements) to flag program errors or data that is 
          out of range. In the example below, the PUT statement is used to flag 
          any missing or zero values for the variable <code>Rate</code>. 
        <pre><font color="#003399">     data finance.newcalc;</font>
<font color="#003399">        infile newloans;</font>
<font color="#003399">        input LoanID $ 1-4 Rate 5-8 Amount 9-19;</font>
<font color="#003399">        if rate&gt;0 then</font>
<font color="#003399">           Interest=amount*(rate/12);</font>
<font color="#003399">        <strong>else put 'DATA ERROR ' rate= _n_=;</strong></font>
<font color="#003399">     run;</font>
</pre>
      </td>
    </tr>
  </table>
  <br>
</center>
<p> 
<center>
  <table cellpadding=2 cellspacing=0 border=0 width="85%">
    <tr> 
      <td>
        <table cellspacing="0" cellpadding="0">
          <tr valign="Top"> 
            <td width="24"><img src="../navimages/note.gif" alt="NOTE:" width="20" height="20"
		  border="0"></td>
              <td>The PUT statement can accomplish a wide variety of tasks. This 
                lesson shows a few ways to use the PUT statement to help you debug 
                a program or examine variable values. For a complete description 
                of the PUT statement, see the 
                <!--doc reference-->
                SAS documentation<strong></strong>.</td>
          </tr>
        </table>
      </td>
    </tr>
  </table>
  <br>
  <br>
</center>
<!-- InstanceEndEditable --> 
</center>
<script>writeNav_regular_bottom();</script>
</body>
<!-- InstanceEnd --></html>
