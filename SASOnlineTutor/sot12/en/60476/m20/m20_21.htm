<html><!-- InstanceBegin template="/Templates/informationObject.dwt" codeOutsideHTMLIsLocked="false" -->
<head>
<SCRIPT LANGUAGE="JavaScript" SRC="../tut.js"></SCRIPT>
<script language="JavaScript" src="../nav.js"></script>
<SCRIPT LANGUAGE="JavaScript">
 setPageTitle();
 setCookie();
  
// Drop down menu link- © Dynamic Drive (www.dynamicdrive.com)
// For full source code and 100's more DHTML scripts, visit http://www.dynamicdrive.com
// Credit MUST stay intact for use -->

</SCRIPT>

<!-- InstanceBeginEditable name="extrascript" --> 
<SCRIPT LANGUAGE="JavaScript">
</SCRIPT>
<!-- InstanceEndEditable -->

<link rel="stylesheet" href="../tut.css">


<META http-equiv="Content-Type" content="text/html; charset=windows-1252">
</HEAD>

<body marginheight="0" marginwidth="0" topmargin="0" leftmargin="0" rightmargin="0" bgcolor="#FFFFF0">
<script>writeinformationObjectTopNav1();</script>
	  
	  <font color="#003399" size="3" face="Arial, Helvetica, sans-serif"><strong><!-- InstanceBeginEditable name="TopicTitle" -->Match-Merge 
      Processing<!-- InstanceEndEditable --></strong></font> <!-- InstanceBeginEditable name="continued" --><!-- InstanceEndEditable -->
	  
<script>writeinformationObjectTopNav2();</script>
<br>
<center>
  <!-- InstanceBeginEditable name="content" --> 
  <table width="85%" border="0" cellpadding="0" cellspacing="0" align="center">
    <tr valign="top"> 
      <td> 
        <p>The match-merging examples in this lesson are straightforward. However, 
          match-merging can be more complex, depending on your data and on the 
          output data set that you want to create. To predict the results of match-merges 
          correctly, you need to understand how the DATA step performs match-merges. 
        <p> When you submit a DATA step, it is processed in two phases: 
        <ul>
          <li> the <strong>compilation phase</strong>, in which SAS checks the 
            syntax of the SAS statements and compiles them (translates them into 
            machine code). During this phase, SAS also sets up descriptor information 
            for the output data set and creates the <strong>program data vector</strong> 
            (PDV), an area of memory where SAS builds your data set, one observation 
            at a time. </ul></td>
    </tr>
  </table>
  <p align="center"> <img border="0" src="images/m20i1g1.gif" alt="compilation phase" width="410"
        height="198"> 
  <p align="center"> 
  <center>
    <table cellpadding=0 cellspacing=0 border=0 width="85%">
      <tr> 
        <td align="left"> <ul>
            <li> the <strong>execution phase</strong>, in which the DATA step 
              reads data and executes any subsequent programming statements. When 
              the DATA step executes, data values are read into the appropriate 
              variables in the program data vector. From here, the variables are 
              written to the output data set as a single observation. </ul></td>
      </tr>
    </table>
  </center>
  <p align="center"> <img border="0" src="images/m20i1g2.gif" alt="execution phase" width="285"
            height="224"> 
  <p align="center">&nbsp; 
  <center>
    <table cellpadding=0 cellspacing=0 border=0 width="85%">
      <tr> 
        <td align="left">The following pages cover DATA step processing in greater 
          detail. In those pages, you learn 
          <ul>
            <li> how the DATA step sets up&nbsp;the new output data set 
            <li> what happens when variables in different data sets have the same 
              name 
            <li> how the DATA step matches observations in input data sets 
            <li> what happens when observations don't match 
            <li> how missing values are handled. </ul></td>
      </tr>
    </table>
  </center>
  <!-- InstanceEndEditable --> 
</center>
<script>writeNav_regular_bottom();</script>
</body>
<!-- InstanceEnd --></html>
