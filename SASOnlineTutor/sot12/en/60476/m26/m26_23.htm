<html><!-- InstanceBegin template="/Templates/informationObject.dwt" codeOutsideHTMLIsLocked="false" -->
<head>
<SCRIPT LANGUAGE="JavaScript" SRC="../tut.js"></SCRIPT>
<script language="JavaScript" src="../nav.js"></script>
<SCRIPT LANGUAGE="JavaScript">
 setPageTitle();
 setCookie();
  
// Drop down menu link- © Dynamic Drive (www.dynamicdrive.com)
// For full source code and 100's more DHTML scripts, visit http://www.dynamicdrive.com
// Credit MUST stay intact for use -->

</SCRIPT>

<!-- InstanceBeginEditable name="extrascript" --> 
<SCRIPT LANGUAGE="JavaScript">
</SCRIPT>
<!-- InstanceEndEditable -->

<link rel="stylesheet" href="../tut.css">


<META http-equiv="Content-Type" content="text/html; charset=windows-1252">
</HEAD>

<body marginheight="0" marginwidth="0" topmargin="0" leftmargin="0" rightmargin="0" bgcolor="#FFFFF0">
<script>writeinformationObjectTopNav1();</script>
	  
	  <font color="#003399" size="3" face="Arial, Helvetica, sans-serif"><strong><!-- InstanceBeginEditable name="TopicTitle" -->Reading 
      a Varying Number of Repeating Fields<!-- InstanceEndEditable --></strong></font> <!-- InstanceBeginEditable name="continued" --><font color="#003399" size="3" face="Arial, Helvetica, sans-serif">(continued)</font><!-- InstanceEndEditable -->
	  
<script>writeinformationObjectTopNav2();</script>
<br>
<center>
  <!-- InstanceBeginEditable name="content" --> 
<table width="85%" border="0" cellpadding="0" cellspacing="0" align="center">
  <tr valign="top"> 
    <td>
<p><strong>Using the MISSOVER Option</strong> </p>
      <p> You can adapt the DATA step to accommodate a varying number of values 
        for <code>Sales</code>. 
      <p> Like the previous example with the same number of repeating fields, 
        your DATA step must read the same record more than once. However, you 
        need to prevent the input pointer from moving to the next record when 
        there are missing values for <code>Sales</code>. 
    </td>
  </tr>
</table><p>
<center>
    <table cellpadding=0 cellspacing=0 border=0 width="85%">
    <tr> 
      <td align="left">You can use the MISSOVER option in an INFILE statement 
        to prevent SAS from reading the next record when missing values are encountered 
        at the end of a record. Essentially, records that have a varying number 
        of repeating fields are records that contain missing values, so you need 
        to specify the MISSOVER option here as well. 
        <p> Because there is at least one value for the repeating field, <code>Sales</code>,&nbsp;&nbsp;in 
          each record, the first INPUT statement reads <strong>both</strong> the 
          value for <code>ID</code> and the first value for <code>Sales</code> 
          in the first record. The trailing @ holds the record so that any subsequent 
          repeating fields can be read. 
      </td>
    </tr>
  </table>
</center>
<p>
  <center>
  </center>
<center>
    <table cellpadding=0 cellspacing=0 border=0 width="85%">
      <tr> 
        <td align="left"> <pre><font color="#003399">     data perm.sales97;</font>
<font color="#003399">        infile data97 <strong>missover</strong>;</font>
<font color="#003399">        <strong>input ID $ Sales : comma. @;
</strong>       </font></pre> 
        </td>
      </tr>
    </table>
    <br>
  Raw Data File Data97 <font  face="Courier New, Courier" size="2" color="#000000"> 
  <table  border=1 cellspacing=0 cellpadding=0 rules=NONE frame=BOX bgcolor="#CCCCCC" title="Raw Data File">
    <tr> 
      <td align=LEFT bgcolor="#F7F7DE"><font  face="Courier New, Courier" size="2" color="#000000">1---+----10--<font color="red"><strong>V</strong></font>+----20---+----30---+----40</font></td>
    </tr>
    <tr> 
      <td align=LEFT bgcolor="#FFFFFF"><font  face="Courier New, Courier" size="2" color="#000000"><font color="teal"><strong><font color="003399">1824 
        1,323.34</font></strong></font> 2,472.85</font></td>
    </tr>
    <tr> 
      <td align=LEFT bgcolor="#FFFFFF"><font  face="Courier New, Courier" size="2" color="#000000">1943 
        1,908.34</font></td>
    </tr>
    <tr> 
      <td align=LEFT bgcolor="#FFFFFF"><font  face="Courier New, Courier" size="2" color="#000000">2046 
        1,423.52 1,673.46 3,276.65</font></td>
    </tr>
    <tr> 
      <td align=LEFT bgcolor="#FFFFFF"><font  face="Courier New, Courier" size="2" color="#000000">2063 
        2,345.34 2,452.45 3,523.52 2,983.01</font></td>
    </tr>
  </table>
  </font><br>
  <br>
    <table width="85%" border="0" cellpadding="2" cellspacing="0">
      <tr> 
        <td valign="top" width="24"><img src="../navimages/note.gif" width="20" height="20" alt="Note"></td>
        <td valign="top"><p>SAS provides several options to control reading past 
            the end of a line. You've seen the MISSOVER option for setting remaining 
            INPUT statement variables to missing values if the pointer reaches 
            the end of a record. You can also use other options such as the <strong>TRUNCOVER 
            option</strong>, which reads column or formatted input when the last 
            variable that is read by the INPUT statement contains varying-length 
            data. The TRUNCOVER option assigns the contents of the input buffer 
            to a variable when the field is shorter than expected.</p>
          <p>Other related options include FLOWOVER (the default), STOPOVER, and 
            SCANOVER. For more information about TRUNCOVER and related options, 
            see the 
            <!--doc reference-->
            SAS documentation.</p>
          </td>
      </tr>
    </table>
    <br>
    <br>
  </center>
<!-- InstanceEndEditable --> 
</center>
<script>writeNav_regular_bottom();</script>
</body>
<!-- InstanceEnd --></html>
