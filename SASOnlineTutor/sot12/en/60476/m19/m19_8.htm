<html><!-- InstanceBegin template="/Templates/informationObject.dwt" codeOutsideHTMLIsLocked="false" -->
<head>
<SCRIPT LANGUAGE="JavaScript" SRC="../tut.js"></SCRIPT>
<script language="JavaScript" src="../nav.js"></script>
<SCRIPT LANGUAGE="JavaScript">
 setPageTitle();
 setCookie();
  
// Drop down menu link- © Dynamic Drive (www.dynamicdrive.com)
// For full source code and 100's more DHTML scripts, visit http://www.dynamicdrive.com
// Credit MUST stay intact for use -->

</SCRIPT>

<!-- InstanceBeginEditable name="extrascript" --> 
<SCRIPT LANGUAGE="JavaScript">
</SCRIPT>
<!-- InstanceEndEditable -->

<link rel="stylesheet" href="../tut.css">


<META http-equiv="Content-Type" content="text/html; charset=windows-1252">
</HEAD>

<body marginheight="0" marginwidth="0" topmargin="0" leftmargin="0" rightmargin="0" bgcolor="#FFFFF0">
<script>writeinformationObjectTopNav1();</script>
	  
	  <font color="#003399" size="3" face="Arial, Helvetica, sans-serif"><strong><!-- InstanceBeginEditable name="TopicTitle" -->Using 
      Formatted Input<!-- InstanceEndEditable --></strong></font> <!-- InstanceBeginEditable name="continued" --><!-- InstanceEndEditable -->
	  
<script>writeinformationObjectTopNav2();</script>
<br>
<center>
  <!-- InstanceBeginEditable name="content" --> 
<table width="85%" border="0" cellpadding="0" cellspacing="0" align="center">
  <tr valign="top"> 
    <td>
<p><strong>The General Form of Formatted Input</strong> </p>
      <p> Formatted input is a very powerful method for reading both standard 
        and nonstandard data in fixed fields.
    </td>
  </tr>
</table>
<p align="center"> <br>
<center>
  <table border="1" cellspacing="0" cellpadding="10" width="85%" bgcolor="#F7F7DE" title="General form, INPUT statement using formatted input">
    <tr> 
      <td align="left"><strong>General form, INPUT statement using formatted input:</strong> 
        <blockquote> <font color="#003399"><nobr><strong>INPUT </strong>&lt;<em>pointer-control</em>&gt; 
            <em>variable informat.</em><strong>;</strong></nobr></font> </blockquote>
        <ul>
          <li> where <font color="#003399"><em>pointer-control</em></font> positions 
            the input pointer on a specified column 
          <li> <font color="#003399"><em>variable</em></font> is the name of the 
            variable that is being created 
          <li> <font color="#003399"><em>informat</em></font> is the special instruction 
            that specifies how SAS reads raw data. 
        </ul>
      </td>
    </tr>
  </table>
</center>
<p align=center> <br>
<center>
  <table cellpadding=0 cellspacing=0 border=0 width="85%">
    <tr> 
      <td align="left">In this lesson, you'll be working with two <strong>column 
        pointer controls</strong>. 
        <p> 
        <ul>
          <li> The <strong>@<em>n</em></strong> moves the input pointer to a specific 
            column number.<br>
            <br>
          <li> The <strong>+<em>n</em> </strong>moves the input pointer forward 
            to a column number that is relative to the current position. 
        </ul>
        <p> Let's first take a look at the @<em>n</em> column pointer control.
      </td>
    </tr>
  </table>
  <br>
  <br>
</center>
<!-- InstanceEndEditable --> 
</center>
<script>writeNav_regular_bottom();</script>
</body>
<!-- InstanceEnd --></html>
